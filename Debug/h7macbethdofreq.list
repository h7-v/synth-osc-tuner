
h7macbethdofreq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009078  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eab8  0800eab8  00010290  2**0
                  CONTENTS
  4 .ARM          00000008  0800eab8  0800eab8  0000fab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eac0  0800eac0  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eac0  0800eac0  0000fac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eac4  0800eac4  0000fac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  0800eac8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000290  0800ed58  00010290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800ed58  00010538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d19c  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  0001d45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a86  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e45  00000000  00000000  00020fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe41  00000000  00000000  00038dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cdb  00000000  00000000  00048c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  000d995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ddcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a28 	.word	0x08005a28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	08005a28 	.word	0x08005a28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <get_nearest_note_x10>:
const char* note_names[] = {
    "C ", "C#", "D ", "D#", "E ", "F ", "F#", "G ", "G#", "A ", "A#", "B "
};

// Function to get the nearest musical note and indicate if frequency is lower or higher
const char* get_nearest_note_x10(int frequency_x10, char *result) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
    int closest_note = -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d6a:	61fb      	str	r3, [r7, #28]
    int min_diff = 1000000;
 8000d6c:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <get_nearest_note_x10+0x120>)
 8000d6e:	61bb      	str	r3, [r7, #24]
    int size = sizeof(note_frequencies) / sizeof(note_frequencies[0]);
 8000d70:	237c      	movs	r3, #124	@ 0x7c
 8000d72:	613b      	str	r3, [r7, #16]

    // Find the closest frequency
    for (int i = 0; i < size; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e014      	b.n	8000da4 <get_nearest_note_x10+0x48>
        int diff = abs(frequency_x10 - note_frequencies[i]);
 8000d7a:	4a41      	ldr	r2, [pc, #260]	@ (8000e80 <get_nearest_note_x10+0x124>)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bfb8      	it	lt
 8000d8a:	425b      	neglt	r3, r3
 8000d8c:	60bb      	str	r3, [r7, #8]
        if (diff < min_diff) {
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da03      	bge.n	8000d9e <get_nearest_note_x10+0x42>
            min_diff = diff;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	61bb      	str	r3, [r7, #24]
            closest_note = i;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < size; i++) {
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbe6      	blt.n	8000d7a <get_nearest_note_x10+0x1e>
        }
    }

    // Calculate a dynamic tolerance (e.g., 0.5% of the frequency)
    int tolerance = frequency_x10 * 1.2 / 1000;  // 0.12% tolerance
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fbb9 	bl	8000524 <__aeabi_i2d>
 8000db2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000db6:	4b33      	ldr	r3, [pc, #204]	@ (8000e84 <get_nearest_note_x10+0x128>)
 8000db8:	f7ff fc1e 	bl	80005f8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <get_nearest_note_x10+0x12c>)
 8000dca:	f7ff fd3f 	bl	800084c <__aeabi_ddiv>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff fe21 	bl	8000a1c <__aeabi_d2iz>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60fb      	str	r3, [r7, #12]

    // Determine if we are higher, lower, or close enough
    if (min_diff <= tolerance) {
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dc14      	bgt.n	8000e10 <get_nearest_note_x10+0xb4>
        // Exact match within tolerance of +/- 0.5
        sprintf(result, " %s ", note_names[closest_note % 12]);
 8000de6:	69f9      	ldr	r1, [r7, #28]
 8000de8:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <get_nearest_note_x10+0x130>)
 8000dea:	fb83 2301 	smull	r2, r3, r3, r1
 8000dee:	105a      	asrs	r2, r3, #1
 8000df0:	17cb      	asrs	r3, r1, #31
 8000df2:	1ad2      	subs	r2, r2, r3
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	1aca      	subs	r2, r1, r3
 8000dfe:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <get_nearest_note_x10+0x134>)
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4923      	ldr	r1, [pc, #140]	@ (8000e94 <get_nearest_note_x10+0x138>)
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f003 fd57 	bl	80048bc <siprintf>
 8000e0e:	e02f      	b.n	8000e70 <get_nearest_note_x10+0x114>
    } else if (frequency_x10 > note_frequencies[closest_note]) {
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <get_nearest_note_x10+0x124>)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dd14      	ble.n	8000e48 <get_nearest_note_x10+0xec>
        // Frequency is higher than the closest note
        sprintf(result, " %s<", note_names[closest_note % 12]);
 8000e1e:	69f9      	ldr	r1, [r7, #28]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <get_nearest_note_x10+0x130>)
 8000e22:	fb83 2301 	smull	r2, r3, r3, r1
 8000e26:	105a      	asrs	r2, r3, #1
 8000e28:	17cb      	asrs	r3, r1, #31
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	1aca      	subs	r2, r1, r3
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <get_nearest_note_x10+0x134>)
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4916      	ldr	r1, [pc, #88]	@ (8000e98 <get_nearest_note_x10+0x13c>)
 8000e40:	6838      	ldr	r0, [r7, #0]
 8000e42:	f003 fd3b 	bl	80048bc <siprintf>
 8000e46:	e013      	b.n	8000e70 <get_nearest_note_x10+0x114>
    } else {
        // Frequency is lower than the closest note
        sprintf(result, ">%s ", note_names[closest_note % 12]);
 8000e48:	69f9      	ldr	r1, [r7, #28]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <get_nearest_note_x10+0x130>)
 8000e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e50:	105a      	asrs	r2, r3, #1
 8000e52:	17cb      	asrs	r3, r1, #31
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	1aca      	subs	r2, r1, r3
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <get_nearest_note_x10+0x134>)
 8000e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e66:	461a      	mov	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <get_nearest_note_x10+0x140>)
 8000e6a:	6838      	ldr	r0, [r7, #0]
 8000e6c:	f003 fd26 	bl	80048bc <siprintf>
    }

    return result;
 8000e70:	683b      	ldr	r3, [r7, #0]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	000f4240 	.word	0x000f4240
 8000e80:	20000000 	.word	0x20000000
 8000e84:	3ff33333 	.word	0x3ff33333
 8000e88:	408f4000 	.word	0x408f4000
 8000e8c:	2aaaaaab 	.word	0x2aaaaaab
 8000e90:	200001f0 	.word	0x200001f0
 8000e94:	08005a70 	.word	0x08005a70
 8000e98:	08005a78 	.word	0x08005a78
 8000e9c:	08005a80 	.word	0x08005a80

08000ea0 <add_to_freq1_averager>:
float total_frequency_ch1 = 0;
int frequency_count_ch1 = 0;
const int AVERAGE_CYCLES1 = 10;  // Number of cycles to average over

// This function is called whenever a new frequency is measured
void add_to_freq1_averager(float new_frequency) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (new_frequency < 70.0f) {
 8000eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eae:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000f34 <add_to_freq1_averager+0x94>
 8000eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	d50a      	bpl.n	8000ed2 <add_to_freq1_averager+0x32>
    	frequency_ch1 = new_frequency;
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <add_to_freq1_averager+0x98>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]

    	total_frequency_ch1 = 0;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <add_to_freq1_averager+0x9c>)
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
    	frequency_count_ch1 = 0;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
    	return;
 8000ed0:	e02a      	b.n	8000f28 <add_to_freq1_averager+0x88>
    }

	// Accumulate the frequency
    total_frequency_ch1 += new_frequency;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <add_to_freq1_averager+0x9c>)
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <add_to_freq1_averager+0x9c>)
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
    frequency_count_ch1++;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000eee:	6013      	str	r3, [r2, #0]

    // Check if we've reached the number of cycles to average
    if (frequency_count_ch1 >= AVERAGE_CYCLES1) {
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	db16      	blt.n	8000f28 <add_to_freq1_averager+0x88>
        // Calculate the average frequency
        float average_frequency = total_frequency_ch1 / frequency_count_ch1;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <add_to_freq1_averager+0x9c>)
 8000efc:	edd3 6a00 	vldr	s13, [r3]
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f10:	edc7 7a03 	vstr	s15, [r7, #12]

        // Display the average frequency (replace this with your display function)
        frequency_ch1 = average_frequency;
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <add_to_freq1_averager+0x98>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6013      	str	r3, [r2, #0]

        // Reset for the next batch of measurements
        total_frequency_ch1 = 0;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <add_to_freq1_averager+0x9c>)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
        frequency_count_ch1 = 0;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <add_to_freq1_averager+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
    }
}
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	428c0000 	.word	0x428c0000
 8000f38:	20000394 	.word	0x20000394
 8000f3c:	2000039c 	.word	0x2000039c
 8000f40:	200003a0 	.word	0x200003a0

08000f44 <add_to_freq2_averager>:
float total_frequency_ch2 = 0;
int frequency_count_ch2 = 0;
const int AVERAGE_CYCLES2 = 10;  // Number of cycles to average over

// This function is called whenever a new frequency is measured
void add_to_freq2_averager(float new_frequency) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (new_frequency < 70.0f) {
 8000f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f52:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000fd8 <add_to_freq2_averager+0x94>
 8000f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5e:	d50a      	bpl.n	8000f76 <add_to_freq2_averager+0x32>
	    frequency_ch2 = new_frequency;
 8000f60:	4a1e      	ldr	r2, [pc, #120]	@ (8000fdc <add_to_freq2_averager+0x98>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]

	    total_frequency_ch2 = 0;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <add_to_freq2_averager+0x9c>)
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
	    frequency_count_ch2 = 0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	    return;
 8000f74:	e02a      	b.n	8000fcc <add_to_freq2_averager+0x88>
	   }

	// Accumulate the frequency
    total_frequency_ch2 += new_frequency;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <add_to_freq2_averager+0x9c>)
 8000f78:	ed93 7a00 	vldr	s14, [r3]
 8000f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <add_to_freq2_averager+0x9c>)
 8000f86:	edc3 7a00 	vstr	s15, [r3]
    frequency_count_ch2++;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000f92:	6013      	str	r3, [r2, #0]

    // Check if we've reached the number of cycles to average
    if (frequency_count_ch2 >= AVERAGE_CYCLES2) {
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	220a      	movs	r2, #10
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	db16      	blt.n	8000fcc <add_to_freq2_averager+0x88>
        // Calculate the average frequency
        float average_frequency = total_frequency_ch2 / frequency_count_ch2;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <add_to_freq2_averager+0x9c>)
 8000fa0:	edd3 6a00 	vldr	s13, [r3]
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	edc7 7a03 	vstr	s15, [r7, #12]

        // Display the average frequency (replace this with your display function)
        frequency_ch2 = average_frequency;
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <add_to_freq2_averager+0x98>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6013      	str	r3, [r2, #0]

        // Reset for the next batch of measurements
        total_frequency_ch2 = 0;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <add_to_freq2_averager+0x9c>)
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
        frequency_count_ch2 = 0;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <add_to_freq2_averager+0xa0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    }
}
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	428c0000 	.word	0x428c0000
 8000fdc:	20000398 	.word	0x20000398
 8000fe0:	200003a4 	.word	0x200003a4
 8000fe4:	200003a8 	.word	0x200003a8

08000fe8 <HAL_TIM_IC_CaptureCallback_TIM2>:
// Uncomment if using prescaler. Also check code in functions below
//#define PRESCALER  1

// Function to handle TIM2 (Channel 1)
void HAL_TIM_IC_CaptureCallback_TIM2(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Channel 1 active
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7f1b      	ldrb	r3, [r3, #28]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d157      	bne.n	80010a8 <HAL_TIM_IC_CaptureCallback_TIM2+0xc0>
    {
        if (Is_First_Captured_Ch1 == 0) // First rising edge
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <HAL_TIM_IC_CaptureCallback_TIM2+0xc8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10a      	bne.n	8001016 <HAL_TIM_IC_CaptureCallback_TIM2+0x2e>
        {
            IC_Val1_Ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f003 f84c 	bl	80040a0 <HAL_TIM_ReadCapturedValue>
 8001008:	4603      	mov	r3, r0
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <HAL_TIM_IC_CaptureCallback_TIM2+0xcc>)
 800100c:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Ch1 = 1; // First capture complete
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <HAL_TIM_IC_CaptureCallback_TIM2+0xc8>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

            __HAL_TIM_SET_COUNTER(htim, 0); // Reset counter
            Is_First_Captured_Ch1 = 0; // Ready for next capture
        }
    }
}
 8001014:	e048      	b.n	80010a8 <HAL_TIM_IC_CaptureCallback_TIM2+0xc0>
            IC_Val2_Ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001016:	2100      	movs	r1, #0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f003 f841 	bl	80040a0 <HAL_TIM_ReadCapturedValue>
 800101e:	4603      	mov	r3, r0
 8001020:	4a25      	ldr	r2, [pc, #148]	@ (80010b8 <HAL_TIM_IC_CaptureCallback_TIM2+0xd0>)
 8001022:	6013      	str	r3, [r2, #0]
            if (IC_Val2_Ch1 >= IC_Val1_Ch1)
 8001024:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <HAL_TIM_IC_CaptureCallback_TIM2+0xd0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <HAL_TIM_IC_CaptureCallback_TIM2+0xcc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d307      	bcc.n	8001040 <HAL_TIM_IC_CaptureCallback_TIM2+0x58>
                Difference_Ch1 = IC_Val2_Ch1 - IC_Val1_Ch1;
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <HAL_TIM_IC_CaptureCallback_TIM2+0xd0>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <HAL_TIM_IC_CaptureCallback_TIM2+0xcc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <HAL_TIM_IC_CaptureCallback_TIM2+0xd4>)
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e007      	b.n	8001050 <HAL_TIM_IC_CaptureCallback_TIM2+0x68>
                Difference_Ch1 = (0xffffffff - IC_Val1_Ch1) + IC_Val2_Ch1;
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_TIM_IC_CaptureCallback_TIM2+0xd0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_TIM_IC_CaptureCallback_TIM2+0xcc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	3b01      	subs	r3, #1
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <HAL_TIM_IC_CaptureCallback_TIM2+0xd4>)
 800104e:	6013      	str	r3, [r2, #0]
            if (Difference_Ch1 > 0)
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <HAL_TIM_IC_CaptureCallback_TIM2+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01c      	beq.n	8001092 <HAL_TIM_IC_CaptureCallback_TIM2+0xaa>
            	add_to_freq1_averager(TIMCLOCK / Difference_Ch1);
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_TIM_IC_CaptureCallback_TIM2+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80010c0 <HAL_TIM_IC_CaptureCallback_TIM2+0xd8>
 8001068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800106c:	eeb0 0a47 	vmov.f32	s0, s14
 8001070:	f7ff ff16 	bl	8000ea0 <add_to_freq1_averager>
                if (frequency_ch1 > 9999.9f)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_TIM_IC_CaptureCallback_TIM2+0xdc>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80010c8 <HAL_TIM_IC_CaptureCallback_TIM2+0xe0>
 800107e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	dd08      	ble.n	800109a <HAL_TIM_IC_CaptureCallback_TIM2+0xb2>
                	frequency_ch1 = 0;
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_TIM_IC_CaptureCallback_TIM2+0xdc>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e003      	b.n	800109a <HAL_TIM_IC_CaptureCallback_TIM2+0xb2>
                frequency_ch1 = 0;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_TIM_IC_CaptureCallback_TIM2+0xdc>)
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COUNTER(htim, 0); // Reset counter
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
            Is_First_Captured_Ch1 = 0; // Ready for next capture
 80010a2:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_TIM_IC_CaptureCallback_TIM2+0xc8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200003b8 	.word	0x200003b8
 80010b4:	200003ac 	.word	0x200003ac
 80010b8:	200003b0 	.word	0x200003b0
 80010bc:	200003b4 	.word	0x200003b4
 80010c0:	4cbebc20 	.word	0x4cbebc20
 80010c4:	20000394 	.word	0x20000394
 80010c8:	461c3f9a 	.word	0x461c3f9a

080010cc <HAL_TIM_IC_CaptureCallback_TIM5>:

// Function to handle TIM5 (Channel 2)
void HAL_TIM_IC_CaptureCallback_TIM5(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // Channel 2 active (TIM5)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d157      	bne.n	800118c <HAL_TIM_IC_CaptureCallback_TIM5+0xc0>
    {
        if (Is_First_Captured_Ch2 == 0) // First rising edge
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <HAL_TIM_IC_CaptureCallback_TIM5+0xc8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <HAL_TIM_IC_CaptureCallback_TIM5+0x2e>
        {
            IC_Val1_Ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80010e4:	2104      	movs	r1, #4
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 ffda 	bl	80040a0 <HAL_TIM_ReadCapturedValue>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001198 <HAL_TIM_IC_CaptureCallback_TIM5+0xcc>)
 80010f0:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Ch2 = 1; // First capture complete
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <HAL_TIM_IC_CaptureCallback_TIM5+0xc8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

            __HAL_TIM_SET_COUNTER(htim, 0); // Reset counter
            Is_First_Captured_Ch2 = 0; // Ready for next capture
        }
    }
}
 80010f8:	e048      	b.n	800118c <HAL_TIM_IC_CaptureCallback_TIM5+0xc0>
            IC_Val2_Ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80010fa:	2104      	movs	r1, #4
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f002 ffcf 	bl	80040a0 <HAL_TIM_ReadCapturedValue>
 8001102:	4603      	mov	r3, r0
 8001104:	4a25      	ldr	r2, [pc, #148]	@ (800119c <HAL_TIM_IC_CaptureCallback_TIM5+0xd0>)
 8001106:	6013      	str	r3, [r2, #0]
            if (IC_Val2_Ch2 >= IC_Val1_Ch2)
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_TIM_IC_CaptureCallback_TIM5+0xd0>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <HAL_TIM_IC_CaptureCallback_TIM5+0xcc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d307      	bcc.n	8001124 <HAL_TIM_IC_CaptureCallback_TIM5+0x58>
                Difference_Ch2 = IC_Val2_Ch2 - IC_Val1_Ch2;
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <HAL_TIM_IC_CaptureCallback_TIM5+0xd0>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_TIM_IC_CaptureCallback_TIM5+0xcc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a20      	ldr	r2, [pc, #128]	@ (80011a0 <HAL_TIM_IC_CaptureCallback_TIM5+0xd4>)
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e007      	b.n	8001134 <HAL_TIM_IC_CaptureCallback_TIM5+0x68>
                Difference_Ch2 = (0xffffffff - IC_Val1_Ch2) + IC_Val2_Ch2;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_TIM_IC_CaptureCallback_TIM5+0xd0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_TIM_IC_CaptureCallback_TIM5+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <HAL_TIM_IC_CaptureCallback_TIM5+0xd4>)
 8001132:	6013      	str	r3, [r2, #0]
            if (Difference_Ch2 > 0)
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_TIM_IC_CaptureCallback_TIM5+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01c      	beq.n	8001176 <HAL_TIM_IC_CaptureCallback_TIM5+0xaa>
            	add_to_freq2_averager(TIMCLOCK / Difference_Ch2);
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_TIM_IC_CaptureCallback_TIM5+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001148:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80011a4 <HAL_TIM_IC_CaptureCallback_TIM5+0xd8>
 800114c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001150:	eeb0 0a47 	vmov.f32	s0, s14
 8001154:	f7ff fef6 	bl	8000f44 <add_to_freq2_averager>
                if (frequency_ch2 > 9999.9f)
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_TIM_IC_CaptureCallback_TIM5+0xdc>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80011ac <HAL_TIM_IC_CaptureCallback_TIM5+0xe0>
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd08      	ble.n	800117e <HAL_TIM_IC_CaptureCallback_TIM5+0xb2>
                    frequency_ch2 = 0;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_TIM_IC_CaptureCallback_TIM5+0xdc>)
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e003      	b.n	800117e <HAL_TIM_IC_CaptureCallback_TIM5+0xb2>
                frequency_ch2 = 0;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_TIM_IC_CaptureCallback_TIM5+0xdc>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COUNTER(htim, 0); // Reset counter
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
            Is_First_Captured_Ch2 = 0; // Ready for next capture
 8001186:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_TIM_IC_CaptureCallback_TIM5+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200003c8 	.word	0x200003c8
 8001198:	200003bc 	.word	0x200003bc
 800119c:	200003c0 	.word	0x200003c0
 80011a0:	200003c4 	.word	0x200003c4
 80011a4:	4cbebc20 	.word	0x4cbebc20
 80011a8:	20000398 	.word	0x20000398
 80011ac:	461c3f9a 	.word	0x461c3f9a

080011b0 <HAL_TIM_IC_CaptureCallback>:

// Main callback handler
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c0:	d103      	bne.n	80011ca <HAL_TIM_IC_CaptureCallback+0x1a>
    {
        HAL_TIM_IC_CaptureCallback_TIM2(htim); // Handle TIM2 (Channel 1)
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff10 	bl	8000fe8 <HAL_TIM_IC_CaptureCallback_TIM2>
    }
    else if (htim->Instance == TIM5)
    {
        HAL_TIM_IC_CaptureCallback_TIM5(htim); // Handle TIM5 (Channel 2)
    }
}
 80011c8:	e007      	b.n	80011da <HAL_TIM_IC_CaptureCallback+0x2a>
    else if (htim->Instance == TIM5)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x34>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d102      	bne.n	80011da <HAL_TIM_IC_CaptureCallback+0x2a>
        HAL_TIM_IC_CaptureCallback_TIM5(htim); // Handle TIM5 (Channel 2)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff79 	bl	80010cc <HAL_TIM_IC_CaptureCallback_TIM5>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40000c00 	.word	0x40000c00

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f001 fb4d 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f919 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fa95 	bl	8001724 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011fa:	f000 f97d 	bl	80014f8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80011fe:	f000 f9b1 	bl	8001564 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001202:	f000 fa1f 	bl	8001644 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  if(System_Init() != 0) {
 8001206:	f000 fd01 	bl	8001c0c <System_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <main+0x2e>
            return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001214:	e0ec      	b.n	80013f0 <main+0x208>
        }

  OLED_0in96_rgb_Init();
 8001216:	f001 faa5 	bl	8002764 <OLED_0in96_rgb_Init>
  Driver_Delay_ms(50); // This was 500ms but I was getting random pixels for 0.5s. Seems to work like this still
 800121a:	2032      	movs	r0, #50	@ 0x32
 800121c:	f000 fd3a 	bl	8001c94 <Driver_Delay_ms>
  OLED_0in96_rgb_Clear();
 8001220:	f001 fac3 	bl	80027aa <OLED_0in96_rgb_Clear>
  Driver_Delay_ms(500);
 8001224:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001228:	f000 fd34 	bl	8001c94 <Driver_Delay_ms>

  //1.Create a new image size
  UBYTE *BlackImage;
  UWORD Imagesize = OLED_0in96_rgb_WIDTH * OLED_0in96_rgb_HEIGHT * 2;
 800122c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001230:	82fb      	strh	r3, [r7, #22]
  if((BlackImage = (UBYTE *)malloc(Imagesize/2)) == NULL) {
 8001232:	8afb      	ldrh	r3, [r7, #22]
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fa89 	bl	8004750 <malloc>
 800123e:	4603      	mov	r3, r0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <main+0x6c>
  		printf("Failed to apply for black memory...\r\n");
 8001248:	486b      	ldr	r0, [pc, #428]	@ (80013f8 <main+0x210>)
 800124a:	f003 fc81 	bl	8004b50 <puts>
  		return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001252:	e0cd      	b.n	80013f0 <main+0x208>
  }

  Paint_NewImage(BlackImage, OLED_0in96_rgb_WIDTH, OLED_0in96_rgb_HEIGHT, 270, BLACK); // 90 is orientation, 270 to flip upside down
 8001254:	2300      	movs	r3, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	2140      	movs	r1, #64	@ 0x40
 8001260:	6938      	ldr	r0, [r7, #16]
 8001262:	f000 fd23 	bl	8001cac <Paint_NewImage>
  Paint_SetScale(65);
 8001266:	2041      	movs	r0, #65	@ 0x41
 8001268:	f000 fd86 	bl	8001d78 <Paint_SetScale>
  printf("Drawing\r\n");
 800126c:	4863      	ldr	r0, [pc, #396]	@ (80013fc <main+0x214>)
 800126e:	f003 fc6f 	bl	8004b50 <puts>
  //1.Select Image
  Paint_SelectImage(BlackImage);
 8001272:	6938      	ldr	r0, [r7, #16]
 8001274:	f000 fd70 	bl	8001d58 <Paint_SelectImage>
  Paint_Clear(BLACK);
 8001278:	2000      	movs	r0, #0
 800127a:	f000 ff69 	bl	8002150 <Paint_Clear>
  Driver_Delay_ms(50);
 800127e:	2032      	movs	r0, #50	@ 0x32
 8001280:	f000 fd08 	bl	8001c94 <Driver_Delay_ms>
  // Use in function below.
  // FOR 270 DEGREES uncheck Scan bottom to Top and check Scan Right to Left instead.
  // Logos not being used are commented out in ImageData.c and ImageData.h

  // Display Macbeth logo
  OLED_0in96_rgb_Display(gImage_macbeth_logo_270deg); // Photoshop Threshold set to 106
 8001284:	485e      	ldr	r0, [pc, #376]	@ (8001400 <main+0x218>)
 8001286:	f001 fac2 	bl	800280e <OLED_0in96_rgb_Display>
  Driver_Delay_ms(1250);
 800128a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800128e:	f000 fd01 	bl	8001c94 <Driver_Delay_ms>
  Paint_Clear(BLACK);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 ff5c 	bl	8002150 <Paint_Clear>
  Driver_Delay_ms(50);
 8001298:	2032      	movs	r0, #50	@ 0x32
 800129a:	f000 fcfb 	bl	8001c94 <Driver_Delay_ms>

  // Display MCA logo
  OLED_0in96_rgb_Display(gImage_mca_logo_270deg); // Photoshop Threshold also set to 106
 800129e:	4859      	ldr	r0, [pc, #356]	@ (8001404 <main+0x21c>)
 80012a0:	f001 fab5 	bl	800280e <OLED_0in96_rgb_Display>
  Driver_Delay_ms(1250);
 80012a4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80012a8:	f000 fcf4 	bl	8001c94 <Driver_Delay_ms>
  Paint_Clear(BLACK);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 ff4f 	bl	8002150 <Paint_Clear>
  Driver_Delay_ms(50);
 80012b2:	2032      	movs	r0, #50	@ 0x32
 80012b4:	f000 fcee 	bl	8001c94 <Driver_Delay_ms>

  // Draw O1 and O2 onto the screen out of the loop as they do not change
//  Paint_DrawString_EN(5, 5, "O1", &Font16, WHITE, BLACK);
//  Paint_DrawString_EN(5, 37, "O2", &Font16, WHITE, BLACK);
  Paint_DrawString_EN(10, 0, "O1", &Font16, WHITE, BLACK);
 80012b8:	2300      	movs	r3, #0
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <main+0x220>)
 80012c4:	4a51      	ldr	r2, [pc, #324]	@ (800140c <main+0x224>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	200a      	movs	r0, #10
 80012ca:	f001 f877 	bl	80023bc <Paint_DrawString_EN>
  Paint_DrawString_EN(10, 32, "O2", &Font16, WHITE, BLACK);
 80012ce:	2300      	movs	r3, #0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <main+0x220>)
 80012da:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <main+0x228>)
 80012dc:	2120      	movs	r1, #32
 80012de:	200a      	movs	r0, #10
 80012e0:	f001 f86c 	bl	80023bc <Paint_DrawString_EN>
  char tunertext_ch2[4];
  float freq1_display;
  float freq2_display;

  // Can I get away without these lines? - Ditching them for a sec to try DMA
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012e4:	2100      	movs	r1, #0
 80012e6:	484b      	ldr	r0, [pc, #300]	@ (8001414 <main+0x22c>)
 80012e8:	f002 fb6c 	bl	80039c4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80012ec:	2104      	movs	r1, #4
 80012ee:	484a      	ldr	r0, [pc, #296]	@ (8001418 <main+0x230>)
 80012f0:	f002 fb68 	bl	80039c4 <HAL_TIM_IC_Start_IT>
//	  Paint_DrawNumStaticDecimalPoint(44, 11, frequency_ch1, &Font16, WHITE, BLACK); // Smaller font first value 46
//	  Paint_DrawNumStaticDecimalPoint(44, 43, frequency_ch2, &Font16, WHITE, BLACK);


	  // WORKING CODE START
	  freq1_display = frequency_ch1;
 80012f4:	4b49      	ldr	r3, [pc, #292]	@ (800141c <main+0x234>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
	  freq2_display = frequency_ch2;
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <main+0x238>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60bb      	str	r3, [r7, #8]

	  // Check if freq1_display is zero and display "--" if true, otherwise call the function
	  if (freq1_display == 0) {
 8001300:	edd7 7a03 	vldr	s15, [r7, #12]
 8001304:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	d10b      	bne.n	8001326 <main+0x13e>
	      Paint_DrawString_EN(52, 0, " -- ", &Font16, WHITE, BLACK);
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <main+0x220>)
 800131a:	4a42      	ldr	r2, [pc, #264]	@ (8001424 <main+0x23c>)
 800131c:	2100      	movs	r1, #0
 800131e:	2034      	movs	r0, #52	@ 0x34
 8001320:	f001 f84c 	bl	80023bc <Paint_DrawString_EN>
 8001324:	e018      	b.n	8001358 <main+0x170>
	  } else {
	      Paint_DrawString_EN(52, 0, get_nearest_note_x10((int)(freq1_display * 10), tunertext_ch1), &Font16, WHITE, BLACK);
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	ee17 0a90 	vmov	r0, s15
 800133e:	f7ff fd0d 	bl	8000d5c <get_nearest_note_x10>
 8001342:	4602      	mov	r2, r0
 8001344:	2300      	movs	r3, #0
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <main+0x220>)
 8001350:	2100      	movs	r1, #0
 8001352:	2034      	movs	r0, #52	@ 0x34
 8001354:	f001 f832 	bl	80023bc <Paint_DrawString_EN>
	  }

	  // Display the frequency value
	  Paint_DrawNumStaticDecimalPoint(52, 16, freq1_display, &Font16, WHITE, BLACK);
 8001358:	2300      	movs	r3, #0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001360:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <main+0x220>)
 8001362:	ed97 0a03 	vldr	s0, [r7, #12]
 8001366:	2110      	movs	r1, #16
 8001368:	2034      	movs	r0, #52	@ 0x34
 800136a:	f001 f87b 	bl	8002464 <Paint_DrawNumStaticDecimalPoint>

	  // Same logic for freq2_display
	  if (freq2_display == 0) {
 800136e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001372:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	d10b      	bne.n	8001394 <main+0x1ac>
	      Paint_DrawString_EN(52, 32, " -- ", &Font16, WHITE, BLACK);
 800137c:	2300      	movs	r3, #0
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <main+0x220>)
 8001388:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <main+0x23c>)
 800138a:	2120      	movs	r1, #32
 800138c:	2034      	movs	r0, #52	@ 0x34
 800138e:	f001 f815 	bl	80023bc <Paint_DrawString_EN>
 8001392:	e018      	b.n	80013c6 <main+0x1de>
	  } else {
	      Paint_DrawString_EN(52, 32, get_nearest_note_x10((int)(freq2_display * 10), tunertext_ch2), &Font16, WHITE, BLACK);
 8001394:	edd7 7a02 	vldr	s15, [r7, #8]
 8001398:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	ee17 0a90 	vmov	r0, s15
 80013ac:	f7ff fcd6 	bl	8000d5c <get_nearest_note_x10>
 80013b0:	4602      	mov	r2, r0
 80013b2:	2300      	movs	r3, #0
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <main+0x220>)
 80013be:	2120      	movs	r1, #32
 80013c0:	2034      	movs	r0, #52	@ 0x34
 80013c2:	f000 fffb 	bl	80023bc <Paint_DrawString_EN>
	  }

	  // Display the second frequency value
	  Paint_DrawNumStaticDecimalPoint(52, 48, freq2_display, &Font16, WHITE, BLACK);
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <main+0x220>)
 80013d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013d4:	2130      	movs	r1, #48	@ 0x30
 80013d6:	2034      	movs	r0, #52	@ 0x34
 80013d8:	f001 f844 	bl	8002464 <Paint_DrawNumStaticDecimalPoint>

	  OLED_0in96_rgb_Display(BlackImage);
 80013dc:	6938      	ldr	r0, [r7, #16]
 80013de:	f001 fa16 	bl	800280e <OLED_0in96_rgb_Display>

	  Driver_Delay_ms(100); // Time between display updates
 80013e2:	2064      	movs	r0, #100	@ 0x64
 80013e4:	f000 fc56 	bl	8001c94 <Driver_Delay_ms>
	  HAL_Delay(50);  // Time between display updates
 80013e8:	2032      	movs	r0, #50	@ 0x32
 80013ea:	f001 fac1 	bl	8002970 <HAL_Delay>
	  freq1_display = frequency_ch1;
 80013ee:	e781      	b.n	80012f4 <main+0x10c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08005a88 	.word	0x08005a88
 80013fc:	08005ab0 	.word	0x08005ab0
 8001400:	08005ea4 	.word	0x08005ea4
 8001404:	08009ea4 	.word	0x08009ea4
 8001408:	20000224 	.word	0x20000224
 800140c:	08005abc 	.word	0x08005abc
 8001410:	08005ac0 	.word	0x08005ac0
 8001414:	20000304 	.word	0x20000304
 8001418:	2000034c 	.word	0x2000034c
 800141c:	20000394 	.word	0x20000394
 8001420:	20000398 	.word	0x20000398
 8001424:	08005ac4 	.word	0x08005ac4

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	@ 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2230      	movs	r2, #48	@ 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fb92 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <SystemClock_Config+0xc8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <SystemClock_Config+0xc8>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <SystemClock_Config+0xc8>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <SystemClock_Config+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <SystemClock_Config+0xcc>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <SystemClock_Config+0xcc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2310      	movs	r3, #16
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001498:	2308      	movs	r3, #8
 800149a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fd33 	bl	8002f18 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b8:	f000 f984 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2302      	movs	r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2103      	movs	r1, #3
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 ff95 	bl	8003408 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e4:	f000 f96e 	bl	80017c4 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	@ 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b17      	ldr	r3, [pc, #92]	@ (800155c <MX_SPI1_Init+0x64>)
 80014fe:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <MX_SPI1_Init+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_SPI1_Init+0x64>)
 8001504:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <MX_SPI1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_SPI1_Init+0x64>)
 8001524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_SPI1_Init+0x64>)
 800152c:	2210      	movs	r2, #16
 800152e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_SPI1_Init+0x64>)
 8001544:	220a      	movs	r2, #10
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_SPI1_Init+0x64>)
 800154a:	f002 f909 	bl	8003760 <HAL_SPI_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001554:	f000 f936 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002ac 	.word	0x200002ac
 8001560:	40013000 	.word	0x40013000

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <MX_TIM2_Init+0xdc>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <MX_TIM2_Init+0xdc>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <MX_TIM2_Init+0xdc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b6:	4822      	ldr	r0, [pc, #136]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015b8:	f002 f95b 	bl	8003872 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80015c2:	f000 f8ff 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4619      	mov	r1, r3
 80015d2:	481b      	ldr	r0, [pc, #108]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015d4:	f002 fc9c 	bl	8003f10 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015de:	f000 f8f1 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015e2:	4817      	ldr	r0, [pc, #92]	@ (8001640 <MX_TIM2_Init+0xdc>)
 80015e4:	f002 f994 	bl	8003910 <HAL_TIM_IC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015ee:	f000 f8e9 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480f      	ldr	r0, [pc, #60]	@ (8001640 <MX_TIM2_Init+0xdc>)
 8001602:	f003 f823 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800160c:	f000 f8da 	bl	80017c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001614:	2301      	movs	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 3;
 800161c:	2303      	movs	r3, #3
 800161e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_TIM2_Init+0xdc>)
 8001628:	f002 fbd6 	bl	8003dd8 <HAL_TIM_IC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001632:	f000 f8c7 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	@ 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000304 	.word	0x20000304

08001644 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001670:	4a2b      	ldr	r2, [pc, #172]	@ (8001720 <MX_TIM5_Init+0xdc>)
 8001672:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <MX_TIM5_Init+0xd8>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001686:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <MX_TIM5_Init+0xd8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001694:	4821      	ldr	r0, [pc, #132]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001696:	f002 f8ec 	bl	8003872 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80016a0:	f000 f890 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	4619      	mov	r1, r3
 80016b0:	481a      	ldr	r0, [pc, #104]	@ (800171c <MX_TIM5_Init+0xd8>)
 80016b2:	f002 fc2d 	bl	8003f10 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80016bc:	f000 f882 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80016c0:	4816      	ldr	r0, [pc, #88]	@ (800171c <MX_TIM5_Init+0xd8>)
 80016c2:	f002 f925 	bl	8003910 <HAL_TIM_IC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80016cc:	f000 f87a 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	480f      	ldr	r0, [pc, #60]	@ (800171c <MX_TIM5_Init+0xd8>)
 80016e0:	f002 ffb4 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80016ea:	f000 f86b 	bl	80017c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016f2:	2301      	movs	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 3;
 80016fa:	2303      	movs	r3, #3
 80016fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016fe:	463b      	mov	r3, r7
 8001700:	2204      	movs	r2, #4
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_TIM5_Init+0xd8>)
 8001706:	f002 fb67 	bl	8003dd8 <HAL_TIM_IC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001710:	f000 f858 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000034c 	.word	0x2000034c
 8001720:	40000c00 	.word	0x40000c00

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <MX_GPIO_Init+0x98>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <MX_GPIO_Init+0x98>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <MX_GPIO_Init+0x98>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MX_GPIO_Init+0x98>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2107      	movs	r1, #7
 8001792:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <MX_GPIO_Init+0x9c>)
 8001794:	f001 fba6 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
 8001798:	2307      	movs	r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <MX_GPIO_Init+0x9c>)
 80017b0:	f001 fa14 	bl	8002bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020400 	.word	0x40020400

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <Error_Handler+0x8>

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_MspInit+0x4c>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_MspInit+0x4c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <HAL_SPI_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_SPI_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800187a:	23e0      	movs	r3, #224	@ 0xe0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188a:	2305      	movs	r3, #5
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <HAL_SPI_MspInit+0x8c>)
 8001896:	f001 f9a1 	bl	8002bdc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	@ 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d0:	d135      	bne.n	800193e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a37      	ldr	r2, [pc, #220]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b2e      	ldr	r3, [pc, #184]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MB_OSC1_IN_Pin;
 800190a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MB_OSC1_IN_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4825      	ldr	r0, [pc, #148]	@ (80019bc <HAL_TIM_Base_MspInit+0x10c>)
 8001928:	f001 f958 	bl	8002bdc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	201c      	movs	r0, #28
 8001932:	f001 f91c 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001936:	201c      	movs	r0, #28
 8001938:	f001 f935 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800193c:	e038      	b.n	80019b0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM5)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_TIM_Base_MspInit+0x110>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d133      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6313      	str	r3, [r2, #48]	@ 0x30
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <HAL_TIM_Base_MspInit+0x108>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MB_OSC2_IN_Pin;
 8001980:	2302      	movs	r3, #2
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001990:	2302      	movs	r3, #2
 8001992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MB_OSC2_IN_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4808      	ldr	r0, [pc, #32]	@ (80019bc <HAL_TIM_Base_MspInit+0x10c>)
 800199c:	f001 f91e 	bl	8002bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2032      	movs	r0, #50	@ 0x32
 80019a6:	f001 f8e2 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f001 f8fb 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	@ 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40000c00 	.word	0x40000c00

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <NMI_Handler+0x4>

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <MemManage_Handler+0x4>

080019dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1a:	f000 ff89 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <TIM2_IRQHandler+0x10>)
 8001a2a:	f002 f8e5 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000304 	.word	0x20000304

08001a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <TIM5_IRQHandler+0x10>)
 8001a3e:	f002 f8db 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000034c 	.word	0x2000034c

08001a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
  }

  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
  }
  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f003 f81a 	bl	8004b90 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20020000 	.word	0x20020000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	200003cc 	.word	0x200003cc
 8001b90:	20000538 	.word	0x20000538

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbc:	f7ff ffea 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be6:	f002 ffd9 	bl	8004b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fafd 	bl	80011e8 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001bfc:	0800eac8 	.word	0x0800eac8
  ldr r2, =_sbss
 8001c00:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8001c04:	20000538 	.word	0x20000538

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
#if USE_SPI_4W
	printf("USE_SPI_4W\r\n");
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <System_Init+0x10>)
 8001c12:	f002 ff9d 	bl	8004b50 <puts>
//	OLED_CS_0;
//	OLED_DC_1;
//	iic_init();
	
#endif
  return 0;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	08005acc 	.word	0x08005acc

08001c20 <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <SPI4W_Write_Byte+0x68>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <SPI4W_Write_Byte+0x68>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c38:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <SPI4W_Write_Byte+0x6c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <SPI4W_Write_Byte+0x6c>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c44:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 8001c46:	bf00      	nop
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <SPI4W_Write_Byte+0x6c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f9      	beq.n	8001c48 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 8001c54:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <SPI4W_Write_Byte+0x70>)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 8001c5a:	bf00      	nop
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <SPI4W_Write_Byte+0x6c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 8001c68:	bf00      	nop
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <SPI4W_Write_Byte+0x6c>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f9      	beq.n	8001c6a <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <SPI4W_Write_Byte+0x70>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b2db      	uxtb	r3, r3
#endif
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	200002ac 	.word	0x200002ac
 8001c8c:	40013000 	.word	0x40013000
 8001c90:	4001300c 	.word	0x4001300c

08001c94 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fe67 	bl	8002970 <HAL_Delay>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4603      	mov	r3, r0
 8001cbc:	817b      	strh	r3, [r7, #10]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	813b      	strh	r3, [r7, #8]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8001ccc:	4a21      	ldr	r2, [pc, #132]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8001cd2:	4a20      	ldr	r2, [pc, #128]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8001cde:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001ce0:	8b3b      	ldrh	r3, [r7, #24]
 8001ce2:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <Paint_NewImage+0x52>
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	e004      	b.n	8001d08 <Paint_NewImage+0x5c>
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d0a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001d0c:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d0e:	893b      	ldrh	r3, [r7, #8]
 8001d10:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <Paint_NewImage+0x7e>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2bb4      	cmp	r3, #180	@ 0xb4
 8001d28:	d106      	bne.n	8001d38 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d2c:	897b      	ldrh	r3, [r7, #10]
 8001d2e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001d30:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d32:	893b      	ldrh	r3, [r7, #8]
 8001d34:	80d3      	strh	r3, [r2, #6]
 8001d36:	e006      	b.n	8001d46 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8001d38:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d3a:	893b      	ldrh	r3, [r7, #8]
 8001d3c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <Paint_NewImage+0xa8>)
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	80d3      	strh	r3, [r2, #6]
    }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200003d0 	.word	0x200003d0

08001d58 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <Paint_SelectImage+0x1c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200003d0 	.word	0x200003d0

08001d78 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d118      	bne.n	8001dba <Paint_SetScale+0x42>
        Paint.Scale = scale;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001d8e:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 8001d90:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001d92:	891b      	ldrh	r3, [r3, #8]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d104      	bne.n	8001da8 <Paint_SetScale+0x30>
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001da0:	891b      	ldrh	r3, [r3, #8]
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	e005      	b.n	8001db4 <Paint_SetScale+0x3c>
 8001da8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001daa:	891b      	ldrh	r3, [r3, #8]
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4a29      	ldr	r2, [pc, #164]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001db6:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 8001db8:	e04b      	b.n	8001e52 <Paint_SetScale+0xda>
    }else if(scale == 4){
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d118      	bne.n	8001df2 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001dc6:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001dca:	891b      	ldrh	r3, [r3, #8]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d104      	bne.n	8001de0 <Paint_SetScale+0x68>
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	e005      	b.n	8001dec <Paint_SetScale+0x74>
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001de2:	891b      	ldrh	r3, [r3, #8]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001dee:	8253      	strh	r3, [r2, #18]
}
 8001df0:	e02f      	b.n	8001e52 <Paint_SetScale+0xda>
    }else if(scale ==16) {
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d118      	bne.n	8001e2a <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001dfe:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d104      	bne.n	8001e18 <Paint_SetScale+0xa0>
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e10:	891b      	ldrh	r3, [r3, #8]
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	e005      	b.n	8001e24 <Paint_SetScale+0xac>
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e26:	8253      	strh	r3, [r2, #18]
}
 8001e28:	e013      	b.n	8001e52 <Paint_SetScale+0xda>
    }else if(scale ==65) {
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b41      	cmp	r3, #65	@ 0x41
 8001e2e:	d10a      	bne.n	8001e46 <Paint_SetScale+0xce>
        Paint.Scale = scale;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e36:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e3a:	891b      	ldrh	r3, [r3, #8]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <Paint_SetScale+0xe4>)
 8001e42:	825a      	strh	r2, [r3, #18]
}
 8001e44:	e005      	b.n	8001e52 <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 8001e46:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <Paint_SetScale+0xe8>)
 8001e48:	f002 fe82 	bl	8004b50 <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <Paint_SetScale+0xec>)
 8001e4e:	f002 fe7f 	bl	8004b50 <puts>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200003d0 	.word	0x200003d0
 8001e60:	08005b1c 	.word	0x08005b1c
 8001e64:	08005b44 	.word	0x08005b44

08001e68 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001e7a:	4b9f      	ldr	r3, [pc, #636]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d804      	bhi.n	8001e8e <Paint_SetPixel+0x26>
 8001e84:	4b9c      	ldr	r3, [pc, #624]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001e86:	88db      	ldrh	r3, [r3, #6]
 8001e88:	88ba      	ldrh	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d903      	bls.n	8001e96 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8001e8e:	489b      	ldr	r0, [pc, #620]	@ (80020fc <Paint_SetPixel+0x294>)
 8001e90:	f002 fe5e 	bl	8004b50 <puts>
        return;
 8001e94:	e156      	b.n	8002144 <Paint_SetPixel+0x2dc>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001e96:	4b98      	ldr	r3, [pc, #608]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001e98:	89db      	ldrh	r3, [r3, #14]
 8001e9a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001e9e:	d02b      	beq.n	8001ef8 <Paint_SetPixel+0x90>
 8001ea0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001ea4:	f300 814b 	bgt.w	800213e <Paint_SetPixel+0x2d6>
 8001ea8:	2bb4      	cmp	r3, #180	@ 0xb4
 8001eaa:	d016      	beq.n	8001eda <Paint_SetPixel+0x72>
 8001eac:	2bb4      	cmp	r3, #180	@ 0xb4
 8001eae:	f300 8146 	bgt.w	800213e <Paint_SetPixel+0x2d6>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <Paint_SetPixel+0x54>
 8001eb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8001eb8:	d005      	beq.n	8001ec6 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8001eba:	e140      	b.n	800213e <Paint_SetPixel+0x2d6>
        X = Xpoint;
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001ec4:	e022      	b.n	8001f0c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8001ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001ec8:	891a      	ldrh	r2, [r3, #8]
 8001eca:	88bb      	ldrh	r3, [r7, #4]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001ed8:	e018      	b.n	8001f0c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8001eda:	4b87      	ldr	r3, [pc, #540]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001edc:	891a      	ldrh	r2, [r3, #8]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001ee8:	4b83      	ldr	r3, [pc, #524]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001eea:	895a      	ldrh	r2, [r3, #10]
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001ef6:	e009      	b.n	8001f0c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001ef8:	88bb      	ldrh	r3, [r7, #4]
 8001efa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001efc:	4b7e      	ldr	r3, [pc, #504]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001efe:	895a      	ldrh	r2, [r3, #10]
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001f0a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001f0c:	4b7a      	ldr	r3, [pc, #488]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f0e:	8a1b      	ldrh	r3, [r3, #16]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	f200 8116 	bhi.w	8002142 <Paint_SetPixel+0x2da>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <Paint_SetPixel+0xb4>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f6b 	.word	0x08001f6b
 8001f20:	08001f2d 	.word	0x08001f2d
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f4d 	.word	0x08001f4d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001f2c:	4b72      	ldr	r3, [pc, #456]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f2e:	891a      	ldrh	r2, [r3, #8]
 8001f30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 8001f3a:	e017      	b.n	8001f6c <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001f3c:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f3e:	895a      	ldrh	r2, [r3, #10]
 8001f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001f4a:	e00f      	b.n	8001f6c <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f4e:	891a      	ldrh	r2, [r3, #8]
 8001f50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 8001f5a:	4b67      	ldr	r3, [pc, #412]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f5c:	895a      	ldrh	r2, [r3, #10]
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001f68:	e000      	b.n	8001f6c <Paint_SetPixel+0x104>
        break;
 8001f6a:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001f6c:	4b62      	ldr	r3, [pc, #392]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f6e:	891b      	ldrh	r3, [r3, #8]
 8001f70:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d804      	bhi.n	8001f80 <Paint_SetPixel+0x118>
 8001f76:	4b60      	ldr	r3, [pc, #384]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f78:	895b      	ldrh	r3, [r3, #10]
 8001f7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d903      	bls.n	8001f88 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8001f80:	485e      	ldr	r0, [pc, #376]	@ (80020fc <Paint_SetPixel+0x294>)
 8001f82:	f002 fde5 	bl	8004b50 <puts>
        return;
 8001f86:	e0dd      	b.n	8002144 <Paint_SetPixel+0x2dc>
    }
    
    if(Paint.Scale == 2){
 8001f88:	4b5b      	ldr	r3, [pc, #364]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f8a:	8adb      	ldrh	r3, [r3, #22]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d13a      	bne.n	8002006 <Paint_SetPixel+0x19e>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8001f90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f92:	08db      	lsrs	r3, r3, #3
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f9a:	4a57      	ldr	r2, [pc, #348]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001f9c:	8a52      	ldrh	r2, [r2, #18]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 8001fa6:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	72fb      	strb	r3, [r7, #11]
        if((Color & 0Xff) == BLACK)
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d113      	bne.n	8001fe2 <Paint_SetPixel+0x17a>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8001fba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	fa42 f303 	asr.w	r3, r2, r3
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b259      	sxtb	r1, r3
 8001fd4:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e0b0      	b.n	8002144 <Paint_SetPixel+0x2dc>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001fe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	fa42 f303 	asr.w	r3, r2, r3
 8001fee:	b25a      	sxtb	r2, r3
 8001ff0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b259      	sxtb	r1, r3
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <Paint_SetPixel+0x290>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	b2ca      	uxtb	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e09e      	b.n	8002144 <Paint_SetPixel+0x2dc>
    }else if(Paint.Scale == 4){
 8002006:	4b3c      	ldr	r3, [pc, #240]	@ (80020f8 <Paint_SetPixel+0x290>)
 8002008:	8adb      	ldrh	r3, [r3, #22]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d137      	bne.n	800207e <Paint_SetPixel+0x216>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800200e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	b29b      	uxth	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002018:	4a37      	ldr	r2, [pc, #220]	@ (80020f8 <Paint_SetPixel+0x290>)
 800201a:	8a52      	ldrh	r2, [r2, #18]
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	440b      	add	r3, r1
 8002022:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <Paint_SetPixel+0x290>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8002038:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	22c0      	movs	r2, #192	@ 0xc0
 8002042:	fa42 f303 	asr.w	r3, r2, r3
 8002046:	b25b      	sxtb	r3, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	b25a      	sxtb	r2, r3
 800204c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002050:	4013      	ands	r3, r2
 8002052:	b25b      	sxtb	r3, r3
 8002054:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	019a      	lsls	r2, r3, #6
 800205a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa42 f303 	asr.w	r3, r2, r3
 8002066:	b25a      	sxtb	r2, r3
 8002068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800206c:	4313      	orrs	r3, r2
 800206e:	b259      	sxtb	r1, r3
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <Paint_SetPixel+0x290>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e062      	b.n	8002144 <Paint_SetPixel+0x2dc>
    }else if(Paint.Scale == 16) {
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <Paint_SetPixel+0x290>)
 8002080:	8adb      	ldrh	r3, [r3, #22]
 8002082:	2b10      	cmp	r3, #16
 8002084:	d13c      	bne.n	8002100 <Paint_SetPixel+0x298>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8002086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <Paint_SetPixel+0x290>)
 8002092:	8a52      	ldrh	r2, [r2, #18]
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	440b      	add	r3, r1
 800209a:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <Paint_SetPixel+0x290>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 80020b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	22f0      	movs	r2, #240	@ 0xf0
 80020ba:	fa42 f303 	asr.w	r3, r2, r3
 80020be:	b25b      	sxtb	r3, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	b25a      	sxtb	r2, r3
 80020c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020c8:	4013      	ands	r3, r2
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	011a      	lsls	r2, r3, #4
 80020d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fa42 f303 	asr.w	r3, r2, r3
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b259      	sxtb	r1, r3
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <Paint_SetPixel+0x290>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	b2ca      	uxtb	r2, r1
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e026      	b.n	8002144 <Paint_SetPixel+0x2dc>
 80020f6:	bf00      	nop
 80020f8:	200003d0 	.word	0x200003d0
 80020fc:	08005c04 	.word	0x08005c04
    }else if(Paint.Scale == 65) {
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <Paint_SetPixel+0x2e4>)
 8002102:	8adb      	ldrh	r3, [r3, #22]
 8002104:	2b41      	cmp	r3, #65	@ 0x41
 8002106:	d11d      	bne.n	8002144 <Paint_SetPixel+0x2dc>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8002108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800210a:	005a      	lsls	r2, r3, #1
 800210c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800210e:	490f      	ldr	r1, [pc, #60]	@ (800214c <Paint_SetPixel+0x2e4>)
 8002110:	8a49      	ldrh	r1, [r1, #18]
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b299      	uxth	r1, r3
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <Paint_SetPixel+0x2e4>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800212c:	4b07      	ldr	r3, [pc, #28]	@ (800214c <Paint_SetPixel+0x2e4>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	3301      	adds	r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e002      	b.n	8002144 <Paint_SetPixel+0x2dc>
        return;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <Paint_SetPixel+0x2dc>
        return;
 8002142:	bf00      	nop
    }
}
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200003d0 	.word	0x200003d0

08002150 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800215a:	4b51      	ldr	r3, [pc, #324]	@ (80022a0 <Paint_Clear+0x150>)
 800215c:	8adb      	ldrh	r3, [r3, #22]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d003      	beq.n	800216a <Paint_Clear+0x1a>
 8002162:	4b4f      	ldr	r3, [pc, #316]	@ (80022a0 <Paint_Clear+0x150>)
 8002164:	8adb      	ldrh	r3, [r3, #22]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d125      	bne.n	80021b6 <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800216a:	2300      	movs	r3, #0
 800216c:	83fb      	strh	r3, [r7, #30]
 800216e:	e01c      	b.n	80021aa <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002170:	2300      	movs	r3, #0
 8002172:	83bb      	strh	r3, [r7, #28]
 8002174:	e011      	b.n	800219a <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002176:	8bba      	ldrh	r2, [r7, #28]
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	4949      	ldr	r1, [pc, #292]	@ (80022a0 <Paint_Clear+0x150>)
 800217c:	8a49      	ldrh	r1, [r1, #18]
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 8002186:	4b46      	ldr	r3, [pc, #280]	@ (80022a0 <Paint_Clear+0x150>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002194:	8bbb      	ldrh	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	83bb      	strh	r3, [r7, #28]
 800219a:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <Paint_Clear+0x150>)
 800219c:	8a5b      	ldrh	r3, [r3, #18]
 800219e:	8bba      	ldrh	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3e8      	bcc.n	8002176 <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80021a4:	8bfb      	ldrh	r3, [r7, #30]
 80021a6:	3301      	adds	r3, #1
 80021a8:	83fb      	strh	r3, [r7, #30]
 80021aa:	4b3d      	ldr	r3, [pc, #244]	@ (80022a0 <Paint_Clear+0x150>)
 80021ac:	8a9b      	ldrh	r3, [r3, #20]
 80021ae:	8bfa      	ldrh	r2, [r7, #30]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d3dd      	bcc.n	8002170 <Paint_Clear+0x20>
 80021b4:	e06e      	b.n	8002294 <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <Paint_Clear+0x150>)
 80021b8:	8adb      	ldrh	r3, [r3, #22]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d12f      	bne.n	800221e <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	837b      	strh	r3, [r7, #26]
 80021c2:	e026      	b.n	8002212 <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80021c4:	2300      	movs	r3, #0
 80021c6:	833b      	strh	r3, [r7, #24]
 80021c8:	e01b      	b.n	8002202 <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 80021ca:	8b3a      	ldrh	r2, [r7, #24]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	4934      	ldr	r1, [pc, #208]	@ (80022a0 <Paint_Clear+0x150>)
 80021d0:	8a49      	ldrh	r1, [r1, #18]
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	b25a      	sxtb	r2, r3
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b259      	sxtb	r1, r3
 80021f0:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <Paint_Clear+0x150>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	b2ca      	uxtb	r2, r1
 80021fa:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80021fc:	8b3b      	ldrh	r3, [r7, #24]
 80021fe:	3301      	adds	r3, #1
 8002200:	833b      	strh	r3, [r7, #24]
 8002202:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <Paint_Clear+0x150>)
 8002204:	8a5b      	ldrh	r3, [r3, #18]
 8002206:	8b3a      	ldrh	r2, [r7, #24]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3de      	bcc.n	80021ca <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800220c:	8b7b      	ldrh	r3, [r7, #26]
 800220e:	3301      	adds	r3, #1
 8002210:	837b      	strh	r3, [r7, #26]
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <Paint_Clear+0x150>)
 8002214:	8a9b      	ldrh	r3, [r3, #20]
 8002216:	8b7a      	ldrh	r2, [r7, #26]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3d3      	bcc.n	80021c4 <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800221c:	e03a      	b.n	8002294 <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <Paint_Clear+0x150>)
 8002220:	8adb      	ldrh	r3, [r3, #22]
 8002222:	2b41      	cmp	r3, #65	@ 0x41
 8002224:	d136      	bne.n	8002294 <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002226:	2300      	movs	r3, #0
 8002228:	82fb      	strh	r3, [r7, #22]
 800222a:	e02d      	b.n	8002288 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800222c:	2300      	movs	r3, #0
 800222e:	82bb      	strh	r3, [r7, #20]
 8002230:	e022      	b.n	8002278 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8002232:	8abb      	ldrh	r3, [r7, #20]
 8002234:	005a      	lsls	r2, r3, #1
 8002236:	8afb      	ldrh	r3, [r7, #22]
 8002238:	4919      	ldr	r1, [pc, #100]	@ (80022a0 <Paint_Clear+0x150>)
 800223a:	8a49      	ldrh	r1, [r1, #18]
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <Paint_Clear+0x150>)
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	440b      	add	r3, r1
 8002254:	f002 020f 	and.w	r2, r2, #15
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <Paint_Clear+0x150>)
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	3301      	adds	r3, #1
 8002268:	440b      	add	r3, r1
 800226a:	f002 020f 	and.w	r2, r2, #15
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002272:	8abb      	ldrh	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	82bb      	strh	r3, [r7, #20]
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <Paint_Clear+0x150>)
 800227a:	8a5b      	ldrh	r3, [r3, #18]
 800227c:	8aba      	ldrh	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3d7      	bcc.n	8002232 <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002282:	8afb      	ldrh	r3, [r7, #22]
 8002284:	3301      	adds	r3, #1
 8002286:	82fb      	strh	r3, [r7, #22]
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <Paint_Clear+0x150>)
 800228a:	8a9b      	ldrh	r3, [r3, #20]
 800228c:	8afa      	ldrh	r2, [r7, #22]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3cc      	bcc.n	800222c <Paint_Clear+0xdc>
}
 8002292:	e7ff      	b.n	8002294 <Paint_Clear+0x144>
 8002294:	bf00      	nop
 8002296:	3724      	adds	r7, #36	@ 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	200003d0 	.word	0x200003d0

080022a4 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4603      	mov	r3, r0
 80022ae:	81fb      	strh	r3, [r7, #14]
 80022b0:	460b      	mov	r3, r1
 80022b2:	81bb      	strh	r3, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80022b8:	4b3e      	ldr	r3, [pc, #248]	@ (80023b4 <Paint_DrawChar+0x110>)
 80022ba:	889b      	ldrh	r3, [r3, #4]
 80022bc:	89fa      	ldrh	r2, [r7, #14]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d804      	bhi.n	80022cc <Paint_DrawChar+0x28>
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <Paint_DrawChar+0x110>)
 80022c4:	88db      	ldrh	r3, [r3, #6]
 80022c6:	89ba      	ldrh	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d903      	bls.n	80022d4 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80022cc:	483a      	ldr	r0, [pc, #232]	@ (80023b8 <Paint_DrawChar+0x114>)
 80022ce:	f002 fc3f 	bl	8004b50 <puts>
        return;
 80022d2:	e06b      	b.n	80023ac <Paint_DrawChar+0x108>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	3b20      	subs	r3, #32
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	88d2      	ldrh	r2, [r2, #6]
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	8892      	ldrh	r2, [r2, #4]
 80022e4:	08d2      	lsrs	r2, r2, #3
 80022e6:	b292      	uxth	r2, r2
 80022e8:	4611      	mov	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	8892      	ldrh	r2, [r2, #4]
 80022ee:	f002 0207 	and.w	r2, r2, #7
 80022f2:	b292      	uxth	r2, r2
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	bf14      	ite	ne
 80022f8:	2201      	movne	r2, #1
 80022fa:	2200      	moveq	r2, #0
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440a      	add	r2, r1
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4413      	add	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002310:	2300      	movs	r3, #0
 8002312:	837b      	strh	r3, [r7, #26]
 8002314:	e045      	b.n	80023a2 <Paint_DrawChar+0xfe>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002316:	2300      	movs	r3, #0
 8002318:	833b      	strh	r3, [r7, #24]
 800231a:	e030      	b.n	800237e <Paint_DrawChar+0xda>

            //To determine whether the font background color and screen background color is consistent
        	if (WHITE == FONT_BACKGROUND) { //this process is to speed up the scan
				if (*ptr & (0x80 >> (Column % 8))){
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	8b3b      	ldrh	r3, [r7, #24]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	2280      	movs	r2, #128	@ 0x80
 800232a:	fa42 f303 	asr.w	r3, r2, r3
 800232e:	400b      	ands	r3, r1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <Paint_DrawChar+0xaa>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8002334:	89fa      	ldrh	r2, [r7, #14]
 8002336:	8b3b      	ldrh	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	b298      	uxth	r0, r3
 800233c:	89ba      	ldrh	r2, [r7, #12]
 800233e:	8b7b      	ldrh	r3, [r7, #26]
 8002340:	4413      	add	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002346:	4619      	mov	r1, r3
 8002348:	f7ff fd8e 	bl	8001e68 <Paint_SetPixel>
 800234c:	e00b      	b.n	8002366 <Paint_DrawChar+0xc2>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
				else{
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800234e:	89fa      	ldrh	r2, [r7, #14]
 8002350:	8b3b      	ldrh	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	b298      	uxth	r0, r3
 8002356:	89ba      	ldrh	r2, [r7, #12]
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	4413      	add	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	f7ff fd81 	bl	8001e68 <Paint_SetPixel>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8002366:	8b3b      	ldrh	r3, [r7, #24]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b07      	cmp	r3, #7
 8002370:	d102      	bne.n	8002378 <Paint_DrawChar+0xd4>
                ptr++;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002378:	8b3b      	ldrh	r3, [r7, #24]
 800237a:	3301      	adds	r3, #1
 800237c:	833b      	strh	r3, [r7, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	889b      	ldrh	r3, [r3, #4]
 8002382:	8b3a      	ldrh	r2, [r7, #24]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3c9      	bcc.n	800231c <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	889b      	ldrh	r3, [r3, #4]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <Paint_DrawChar+0xf8>
            ptr++;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800239c:	8b7b      	ldrh	r3, [r7, #26]
 800239e:	3301      	adds	r3, #1
 80023a0:	837b      	strh	r3, [r7, #26]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	88db      	ldrh	r3, [r3, #6]
 80023a6:	8b7a      	ldrh	r2, [r7, #26]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3b4      	bcc.n	8002316 <Paint_DrawChar+0x72>
    }// Write all
}
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003d0 	.word	0x200003d0
 80023b8:	08005d68 	.word	0x08005d68

080023bc <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4603      	mov	r3, r0
 80023c8:	81fb      	strh	r3, [r7, #14]
 80023ca:	460b      	mov	r3, r1
 80023cc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	82bb      	strh	r3, [r7, #20]
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <Paint_DrawString_EN+0xa0>)
 80023d8:	889b      	ldrh	r3, [r3, #4]
 80023da:	89fa      	ldrh	r2, [r7, #14]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d804      	bhi.n	80023ea <Paint_DrawString_EN+0x2e>
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <Paint_DrawString_EN+0xa0>)
 80023e2:	88db      	ldrh	r3, [r3, #6]
 80023e4:	89ba      	ldrh	r2, [r7, #12]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d931      	bls.n	800244e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80023ea:	481d      	ldr	r0, [pc, #116]	@ (8002460 <Paint_DrawString_EN+0xa4>)
 80023ec:	f002 fbb0 	bl	8004b50 <puts>
        return;
 80023f0:	e031      	b.n	8002456 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80023f2:	8afb      	ldrh	r3, [r7, #22]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	8892      	ldrh	r2, [r2, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a18      	ldr	r2, [pc, #96]	@ (800245c <Paint_DrawString_EN+0xa0>)
 80023fc:	8892      	ldrh	r2, [r2, #4]
 80023fe:	4293      	cmp	r3, r2
 8002400:	dd06      	ble.n	8002410 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	88da      	ldrh	r2, [r3, #6]
 800240a:	8abb      	ldrh	r3, [r7, #20]
 800240c:	4413      	add	r3, r2
 800240e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8002410:	8abb      	ldrh	r3, [r7, #20]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	88d2      	ldrh	r2, [r2, #6]
 8002416:	4413      	add	r3, r2
 8002418:	4a10      	ldr	r2, [pc, #64]	@ (800245c <Paint_DrawString_EN+0xa0>)
 800241a:	88d2      	ldrh	r2, [r2, #6]
 800241c:	4293      	cmp	r3, r2
 800241e:	dd03      	ble.n	8002428 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8002420:	89fb      	ldrh	r3, [r7, #14]
 8002422:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Foreground, Color_Background);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	8ab9      	ldrh	r1, [r7, #20]
 800242e:	8af8      	ldrh	r0, [r7, #22]
 8002430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	8c3b      	ldrh	r3, [r7, #32]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f7ff ff33 	bl	80022a4 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	889a      	ldrh	r2, [r3, #4]
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	4413      	add	r3, r2
 800244c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1cd      	bne.n	80023f2 <Paint_DrawString_EN+0x36>
    }
}
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200003d0 	.word	0x200003d0
 8002460:	08005da8 	.word	0x08005da8

08002464 <Paint_DrawNumStaticDecimalPoint>:

// h7
#define MAX_DIGITS_BEFORE_DECIMAL 4 // We will not go above 5000Hz
#define MAX_DIGITS_AFTER_DECIMAL 1
void Paint_DrawNumStaticDecimalPoint(UWORD Xpoint, UWORD Ypoint, float Number,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	@ 0x38
 8002468:	af02      	add	r7, sp, #8
 800246a:	ed87 0a02 	vstr	s0, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	81fb      	strh	r3, [r7, #14]
 8002476:	460b      	mov	r3, r1
 8002478:	81bb      	strh	r3, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	807b      	strh	r3, [r7, #2]
	char Str_Array[MAX_DIGITS_BEFORE_DECIMAL + MAX_DIGITS_AFTER_DECIMAL + 2] = {0}; // +2 for dot and null terminator
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	2100      	movs	r1, #0
 8002488:	460a      	mov	r2, r1
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	460a      	mov	r2, r1
 800248e:	709a      	strb	r2, [r3, #2]
	    int integer_part = (int)Number;
 8002490:	edd7 7a02 	vldr	s15, [r7, #8]
 8002494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002498:	ee17 3a90 	vmov	r3, s15
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    int decimal_part = (int)((Number - integer_part) * 10); // Get the first decimal place
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	61fb      	str	r3, [r7, #28]
	    int Num_Bit = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	    int leading_space_count = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24

	    // Check for out-of-bounds
	    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <Paint_DrawNumStaticDecimalPoint+0x18c>)
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	89fa      	ldrh	r2, [r7, #14]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d804      	bhi.n	80024de <Paint_DrawNumStaticDecimalPoint+0x7a>
 80024d4:	4b46      	ldr	r3, [pc, #280]	@ (80025f0 <Paint_DrawNumStaticDecimalPoint+0x18c>)
 80024d6:	88db      	ldrh	r3, [r3, #6]
 80024d8:	89ba      	ldrh	r2, [r7, #12]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d903      	bls.n	80024e6 <Paint_DrawNumStaticDecimalPoint+0x82>
	        Debug("Paint_DrawNum Input exceeds the normal display range\r\n");
 80024de:	4845      	ldr	r0, [pc, #276]	@ (80025f4 <Paint_DrawNumStaticDecimalPoint+0x190>)
 80024e0:	f002 fb36 	bl	8004b50 <puts>
 80024e4:	e080      	b.n	80025e8 <Paint_DrawNumStaticDecimalPoint+0x184>
	        return;
	    }

	    // Formatting the integer part
	    for (int i = MAX_DIGITS_BEFORE_DECIMAL - 1; i >= 0; i--) {
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	e031      	b.n	8002550 <Paint_DrawNumStaticDecimalPoint+0xec>
	        if (integer_part > 0) {
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dd1f      	ble.n	8002532 <Paint_DrawNumStaticDecimalPoint+0xce>
	            // If we have a non-zero digit, fill it in and break the loop
	            Str_Array[i] = (integer_part % 10) + '0';
 80024f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f4:	4b40      	ldr	r3, [pc, #256]	@ (80025f8 <Paint_DrawNumStaticDecimalPoint+0x194>)
 80024f6:	fb83 1302 	smull	r1, r3, r3, r2
 80024fa:	1099      	asrs	r1, r3, #2
 80024fc:	17d3      	asrs	r3, r2, #31
 80024fe:	1ac9      	subs	r1, r1, r3
 8002500:	460b      	mov	r3, r1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	1ad1      	subs	r1, r2, r3
 800250a:	b2cb      	uxtb	r3, r1
 800250c:	3330      	adds	r3, #48	@ 0x30
 800250e:	b2d9      	uxtb	r1, r3
 8002510:	f107 0214 	add.w	r2, r7, #20
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	4413      	add	r3, r2
 8002518:	460a      	mov	r2, r1
 800251a:	701a      	strb	r2, [r3, #0]
	            integer_part /= 10;
 800251c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251e:	4a36      	ldr	r2, [pc, #216]	@ (80025f8 <Paint_DrawNumStaticDecimalPoint+0x194>)
 8002520:	fb82 1203 	smull	r1, r2, r2, r3
 8002524:	1092      	asrs	r2, r2, #2
 8002526:	17db      	asrs	r3, r3, #31
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	            leading_space_count = 0; // Reset space counter when we find a digit
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e008      	b.n	8002544 <Paint_DrawNumStaticDecimalPoint+0xe0>
	        } else {
	            // If we're still in leading zero territory, fill with spaces
	            Str_Array[i] = ' ';
 8002532:	f107 0214 	add.w	r2, r7, #20
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	4413      	add	r3, r2
 800253a:	2220      	movs	r2, #32
 800253c:	701a      	strb	r2, [r3, #0]
	            leading_space_count++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
	        }
	        Num_Bit++;
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	3301      	adds	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
	    for (int i = MAX_DIGITS_BEFORE_DECIMAL - 1; i >= 0; i--) {
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	3b01      	subs	r3, #1
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	daca      	bge.n	80024ec <Paint_DrawNumStaticDecimalPoint+0x88>
	    }

	    // If there were only zeros, make sure we have at least one digit
	    if (leading_space_count == MAX_DIGITS_BEFORE_DECIMAL) {
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	2b04      	cmp	r3, #4
 800255a:	d101      	bne.n	8002560 <Paint_DrawNumStaticDecimalPoint+0xfc>
	        Str_Array[MAX_DIGITS_BEFORE_DECIMAL - 1] = '0'; // Ensure we have at least one zero if all were spaces
 800255c:	2330      	movs	r3, #48	@ 0x30
 800255e:	75fb      	strb	r3, [r7, #23]
	    }

	    // Add the decimal point
	    Str_Array[MAX_DIGITS_BEFORE_DECIMAL] = '.';
 8002560:	232e      	movs	r3, #46	@ 0x2e
 8002562:	763b      	strb	r3, [r7, #24]
	    Num_Bit++; // Increment for the decimal point
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	3301      	adds	r3, #1
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28

	    // Add the decimal part
	    Str_Array[MAX_DIGITS_BEFORE_DECIMAL + 1] = (decimal_part % 10) + '0'; // First decimal place
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <Paint_DrawNumStaticDecimalPoint+0x194>)
 800256e:	fb83 1302 	smull	r1, r3, r3, r2
 8002572:	1099      	asrs	r1, r3, #2
 8002574:	17d3      	asrs	r3, r2, #31
 8002576:	1ac9      	subs	r1, r1, r3
 8002578:	460b      	mov	r3, r1
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	1ad1      	subs	r1, r2, r3
 8002582:	b2cb      	uxtb	r3, r1
 8002584:	3330      	adds	r3, #48	@ 0x30
 8002586:	b2db      	uxtb	r3, r3
 8002588:	767b      	strb	r3, [r7, #25]

	    // Debugging output
	    Debug("Formatted Number: %s\r\n", Str_Array);  // Check the formatted string
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	481a      	ldr	r0, [pc, #104]	@ (80025fc <Paint_DrawNumStaticDecimalPoint+0x198>)
 8002592:	f002 fa75 	bl	8004a80 <iprintf>
//	        Str_Array[5] = '.';
//	        Str_Array[6] = '-';
//	    }

	    // For up to 5000Hz
	    if (Str_Array[0] == ' ' && Str_Array[1] == ' ' && Str_Array[2] == ' ' && Str_Array[3] == '0' && Str_Array[4] == '.' && Str_Array[5] == '0') {
 8002596:	7d3b      	ldrb	r3, [r7, #20]
 8002598:	2b20      	cmp	r3, #32
 800259a:	d11a      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
 800259c:	7d7b      	ldrb	r3, [r7, #21]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d117      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
 80025a2:	7dbb      	ldrb	r3, [r7, #22]
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d114      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b30      	cmp	r3, #48	@ 0x30
 80025ac:	d111      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
 80025ae:	7e3b      	ldrb	r3, [r7, #24]
 80025b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80025b2:	d10e      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
 80025b4:	7e7b      	ldrb	r3, [r7, #25]
 80025b6:	2b30      	cmp	r3, #48	@ 0x30
 80025b8:	d10b      	bne.n	80025d2 <Paint_DrawNumStaticDecimalPoint+0x16e>
	    	Str_Array[0] = ' ';
 80025ba:	2320      	movs	r3, #32
 80025bc:	753b      	strb	r3, [r7, #20]
	        Str_Array[1] = ' ';
 80025be:	2320      	movs	r3, #32
 80025c0:	757b      	strb	r3, [r7, #21]
	        Str_Array[2] = ' ';
 80025c2:	2320      	movs	r3, #32
 80025c4:	75bb      	strb	r3, [r7, #22]
	    	Str_Array[3] = '-';
 80025c6:	232d      	movs	r3, #45	@ 0x2d
 80025c8:	75fb      	strb	r3, [r7, #23]
	    	Str_Array[4] = '.';
 80025ca:	232e      	movs	r3, #46	@ 0x2e
 80025cc:	763b      	strb	r3, [r7, #24]
	    	Str_Array[5] = '-';
 80025ce:	232d      	movs	r3, #45	@ 0x2d
 80025d0:	767b      	strb	r3, [r7, #25]
	    }


	    // Show the formatted number
	    Paint_DrawString_EN(Xpoint, Ypoint, Str_Array, Font, Color_Foreground, Color_Background);
 80025d2:	f107 0214 	add.w	r2, r7, #20
 80025d6:	89b9      	ldrh	r1, [r7, #12]
 80025d8:	89f8      	ldrh	r0, [r7, #14]
 80025da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f7ff feea 	bl	80023bc <Paint_DrawString_EN>
}
 80025e8:	3730      	adds	r7, #48	@ 0x30
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200003d0 	.word	0x200003d0
 80025f4:	08005e28 	.word	0x08005e28
 80025f8:	66666667 	.word	0x66666667
 80025fc:	08005e68 	.word	0x08005e68

08002600 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    OLED_RST_1;
 8002604:	2201      	movs	r2, #1
 8002606:	2104      	movs	r1, #4
 8002608:	480b      	ldr	r0, [pc, #44]	@ (8002638 <OLED_Reset+0x38>)
 800260a:	f000 fc6b 	bl	8002ee4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(200);
 800260e:	20c8      	movs	r0, #200	@ 0xc8
 8002610:	f7ff fb40 	bl	8001c94 <Driver_Delay_ms>
    OLED_RST_0;
 8002614:	2200      	movs	r2, #0
 8002616:	2104      	movs	r1, #4
 8002618:	4807      	ldr	r0, [pc, #28]	@ (8002638 <OLED_Reset+0x38>)
 800261a:	f000 fc63 	bl	8002ee4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(200);
 800261e:	20c8      	movs	r0, #200	@ 0xc8
 8002620:	f7ff fb38 	bl	8001c94 <Driver_Delay_ms>
    OLED_RST_1;
 8002624:	2201      	movs	r2, #1
 8002626:	2104      	movs	r1, #4
 8002628:	4803      	ldr	r0, [pc, #12]	@ (8002638 <OLED_Reset+0x38>)
 800262a:	f000 fc5b 	bl	8002ee4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(200);
 800262e:	20c8      	movs	r0, #200	@ 0xc8
 8002630:	f7ff fb30 	bl	8001c94 <Driver_Delay_ms>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40020400 	.word	0x40020400

0800263c <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	#if USE_SPI_4W
			OLED_DC_0;
 8002646:	2200      	movs	r2, #0
 8002648:	2102      	movs	r1, #2
 800264a:	480a      	ldr	r0, [pc, #40]	@ (8002674 <OLED_WriteReg+0x38>)
 800264c:	f000 fc4a 	bl	8002ee4 <HAL_GPIO_WritePin>
			OLED_CS_0;
 8002650:	2200      	movs	r2, #0
 8002652:	2101      	movs	r1, #1
 8002654:	4807      	ldr	r0, [pc, #28]	@ (8002674 <OLED_WriteReg+0x38>)
 8002656:	f000 fc45 	bl	8002ee4 <HAL_GPIO_WritePin>
			SPI4W_Write_Byte(Reg);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fadf 	bl	8001c20 <SPI4W_Write_Byte>
			OLED_CS_1;
 8002662:	2201      	movs	r2, #1
 8002664:	2101      	movs	r1, #1
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <OLED_WriteReg+0x38>)
 8002668:	f000 fc3c 	bl	8002ee4 <HAL_GPIO_WritePin>
		iic_write_byte(Reg);
		iic_wait_for_ack();
		iic_stop();

	#endif
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40020400 	.word	0x40020400

08002678 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
	#if USE_SPI_4W
			OLED_DC_1;
 8002682:	2201      	movs	r2, #1
 8002684:	2102      	movs	r1, #2
 8002686:	480a      	ldr	r0, [pc, #40]	@ (80026b0 <OLED_WriteData+0x38>)
 8002688:	f000 fc2c 	bl	8002ee4 <HAL_GPIO_WritePin>
			OLED_CS_0;
 800268c:	2200      	movs	r2, #0
 800268e:	2101      	movs	r1, #1
 8002690:	4807      	ldr	r0, [pc, #28]	@ (80026b0 <OLED_WriteData+0x38>)
 8002692:	f000 fc27 	bl	8002ee4 <HAL_GPIO_WritePin>
			SPI4W_Write_Byte(Data);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fac1 	bl	8001c20 <SPI4W_Write_Byte>
			OLED_CS_1;
 800269e:	2201      	movs	r2, #1
 80026a0:	2101      	movs	r1, #1
 80026a2:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <OLED_WriteData+0x38>)
 80026a4:	f000 fc1e 	bl	8002ee4 <HAL_GPIO_WritePin>
		iic_wait_for_ack();
		iic_stop();

	#endif
	
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020400 	.word	0x40020400

080026b4 <OLED_InitReg>:
/*******************************************************************************
function:
            Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xfd);   // command lock
 80026b8:	20fd      	movs	r0, #253	@ 0xfd
 80026ba:	f7ff ffbf 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x12);
 80026be:	2012      	movs	r0, #18
 80026c0:	f7ff ffda 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xae);  // display off
 80026c4:	20ae      	movs	r0, #174	@ 0xae
 80026c6:	f7ff ffb9 	bl	800263c <OLED_WriteReg>
    // OLED_WriteReg(0xa4);  # display off

    OLED_WriteReg(0xa0);  // set re-map & data format
 80026ca:	20a0      	movs	r0, #160	@ 0xa0
 80026cc:	f7ff ffb6 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x60);     // Horizontal address increment
 80026d0:	2060      	movs	r0, #96	@ 0x60
 80026d2:	f7ff ffd1 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff ffce 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xa1);  // set display start line
 80026dc:	20a1      	movs	r0, #161	@ 0xa1
 80026de:	f7ff ffad 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);     // start 0 line
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff ffc8 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xa2);  // set display offset
 80026e8:	20a2      	movs	r0, #162	@ 0xa2
 80026ea:	f7ff ffa7 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff ffc2 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xB1);
 80026f4:	20b1      	movs	r0, #177	@ 0xb1
 80026f6:	f7ff ffa1 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x84);
 80026fa:	2084      	movs	r0, #132	@ 0x84
 80026fc:	f7ff ffbc 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xB3);
 8002700:	20b3      	movs	r0, #179	@ 0xb3
 8002702:	f7ff ff9b 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x20);
 8002706:	2020      	movs	r0, #32
 8002708:	f7ff ffb6 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xB6);
 800270c:	20b6      	movs	r0, #182	@ 0xb6
 800270e:	f7ff ff95 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x01);
 8002712:	2001      	movs	r0, #1
 8002714:	f7ff ffb0 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xBB);
 8002718:	20bb      	movs	r0, #187	@ 0xbb
 800271a:	f7ff ff8f 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7ff ffaa 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xBE);
 8002724:	20be      	movs	r0, #190	@ 0xbe
 8002726:	f7ff ff89 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x07);
 800272a:	2007      	movs	r0, #7
 800272c:	f7ff ffa4 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xC7);
 8002730:	20c7      	movs	r0, #199	@ 0xc7
 8002732:	f7ff ff83 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x0F);
 8002736:	200f      	movs	r0, #15
 8002738:	f7ff ff9e 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xC1);
 800273c:	20c1      	movs	r0, #193	@ 0xc1
 800273e:	f7ff ff7d 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x32);
 8002742:	2032      	movs	r0, #50	@ 0x32
 8002744:	f7ff ff98 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x29);
 8002748:	2029      	movs	r0, #41	@ 0x29
 800274a:	f7ff ff95 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x53);
 800274e:	2053      	movs	r0, #83	@ 0x53
 8002750:	f7ff ff92 	bl	8002678 <OLED_WriteData>

    OLED_WriteReg(0xCA);
 8002754:	20ca      	movs	r0, #202	@ 0xca
 8002756:	f7ff ff71 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x7F);
 800275a:	207f      	movs	r0, #127	@ 0x7f
 800275c:	f7ff ff8c 	bl	8002678 <OLED_WriteData>
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}

08002764 <OLED_0in96_rgb_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_0in96_rgb_Init()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    #if USE_IIC_SOFT||USE_IIC
    OLED_DC_1;
    #endif
    //Hardware reset
    OLED_Reset();
 8002768:	f7ff ff4a 	bl	8002600 <OLED_Reset>
    //Set the initialization register
    OLED_InitReg();
 800276c:	f7ff ffa2 	bl	80026b4 <OLED_InitReg>
    Driver_Delay_ms(200);
 8002770:	20c8      	movs	r0, #200	@ 0xc8
 8002772:	f7ff fa8f 	bl	8001c94 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xaf);
 8002776:	20af      	movs	r0, #175	@ 0xaf
 8002778:	f7ff ff60 	bl	800263c <OLED_WriteReg>
    
    OLED_WriteReg(0x15);  // set column address
 800277c:	2015      	movs	r0, #21
 800277e:	f7ff ff5d 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x20);     // column address start 00
 8002782:	2020      	movs	r0, #32
 8002784:	f7ff ff78 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x5f);     // column address end 127
 8002788:	205f      	movs	r0, #95	@ 0x5f
 800278a:	f7ff ff75 	bl	8002678 <OLED_WriteData>
    OLED_WriteReg(0x75);  // set row address
 800278e:	2075      	movs	r0, #117	@ 0x75
 8002790:	f7ff ff54 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);     // row address start 00
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ff6f 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x7f);     // row address end 95   
 800279a:	207f      	movs	r0, #127	@ 0x7f
 800279c:	f7ff ff6c 	bl	8002678 <OLED_WriteData>
    OLED_WriteReg(0x5C); 
 80027a0:	205c      	movs	r0, #92	@ 0x5c
 80027a2:	f7ff ff4b 	bl	800263c <OLED_WriteReg>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <OLED_0in96_rgb_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_0in96_rgb_Clear()
{    
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
    
    OLED_WriteReg(0x15);
 80027b0:	2015      	movs	r0, #21
 80027b2:	f7ff ff43 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x20);
 80027b6:	2020      	movs	r0, #32
 80027b8:	f7ff ff5e 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x5f);
 80027bc:	205f      	movs	r0, #95	@ 0x5f
 80027be:	f7ff ff5b 	bl	8002678 <OLED_WriteData>
    OLED_WriteReg(0x75);
 80027c2:	2075      	movs	r0, #117	@ 0x75
 80027c4:	f7ff ff3a 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff ff55 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x7f);
 80027ce:	207f      	movs	r0, #127	@ 0x7f
 80027d0:	f7ff ff52 	bl	8002678 <OLED_WriteData>
    // fill!
    OLED_WriteReg(0x5C); 
 80027d4:	205c      	movs	r0, #92	@ 0x5c
 80027d6:	f7ff ff31 	bl	800263c <OLED_WriteReg>
    
    
    for (UWORD j = 0; j < OLED_0in96_rgb_HEIGHT; j++) {
 80027da:	2300      	movs	r3, #0
 80027dc:	80fb      	strh	r3, [r7, #6]
 80027de:	e00e      	b.n	80027fe <OLED_0in96_rgb_Clear+0x54>
        for (UWORD i = 0; i < OLED_0in96_rgb_WIDTH*2; i++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	80bb      	strh	r3, [r7, #4]
 80027e4:	e005      	b.n	80027f2 <OLED_0in96_rgb_Clear+0x48>
            OLED_WriteData(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff ff46 	bl	8002678 <OLED_WriteData>
        for (UWORD i = 0; i < OLED_0in96_rgb_WIDTH*2; i++) {
 80027ec:	88bb      	ldrh	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	80bb      	strh	r3, [r7, #4]
 80027f2:	88bb      	ldrh	r3, [r7, #4]
 80027f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80027f6:	d9f6      	bls.n	80027e6 <OLED_0in96_rgb_Clear+0x3c>
    for (UWORD j = 0; j < OLED_0in96_rgb_HEIGHT; j++) {
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	3301      	adds	r3, #1
 80027fc:	80fb      	strh	r3, [r7, #6]
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b7f      	cmp	r3, #127	@ 0x7f
 8002802:	d9ed      	bls.n	80027e0 <OLED_0in96_rgb_Clear+0x36>
        }
    }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <OLED_0in96_rgb_Display>:
/********************************************************************************
function:	
    Update all memory to OLED
********************************************************************************/
void OLED_0in96_rgb_Display(const UBYTE *Image)
{     
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    
    OLED_WriteReg(0x15);
 8002816:	2015      	movs	r0, #21
 8002818:	f7ff ff10 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x20);
 800281c:	2020      	movs	r0, #32
 800281e:	f7ff ff2b 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x5f);
 8002822:	205f      	movs	r0, #95	@ 0x5f
 8002824:	f7ff ff28 	bl	8002678 <OLED_WriteData>
    OLED_WriteReg(0x75);
 8002828:	2075      	movs	r0, #117	@ 0x75
 800282a:	f7ff ff07 	bl	800263c <OLED_WriteReg>
    OLED_WriteData(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7ff ff22 	bl	8002678 <OLED_WriteData>
    OLED_WriteData(0x7f);
 8002834:	207f      	movs	r0, #127	@ 0x7f
 8002836:	f7ff ff1f 	bl	8002678 <OLED_WriteData>
    // fill!
    OLED_WriteReg(0x5C); 
 800283a:	205c      	movs	r0, #92	@ 0x5c
 800283c:	f7ff fefe 	bl	800263c <OLED_WriteReg>
    
    for(i=0; i<OLED_0in96_rgb_WIDTH; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
 8002844:	e019      	b.n	800287a <OLED_0in96_rgb_Display+0x6c>
    {
        for(j=0; j<OLED_0in96_rgb_HEIGHT*2; j++)
 8002846:	2300      	movs	r3, #0
 8002848:	81bb      	strh	r3, [r7, #12]
 800284a:	e010      	b.n	800286e <OLED_0in96_rgb_Display+0x60>
        {
            temp = Image[j + i*OLED_0in96_rgb_HEIGHT*2];
 800284c:	89ba      	ldrh	r2, [r7, #12]
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4413      	add	r3, r2
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff08 	bl	8002678 <OLED_WriteData>
        for(j=0; j<OLED_0in96_rgb_HEIGHT*2; j++)
 8002868:	89bb      	ldrh	r3, [r7, #12]
 800286a:	3301      	adds	r3, #1
 800286c:	81bb      	strh	r3, [r7, #12]
 800286e:	89bb      	ldrh	r3, [r7, #12]
 8002870:	2bff      	cmp	r3, #255	@ 0xff
 8002872:	d9eb      	bls.n	800284c <OLED_0in96_rgb_Display+0x3e>
    for(i=0; i<OLED_0in96_rgb_WIDTH; i++)
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	3301      	adds	r3, #1
 8002878:	81fb      	strh	r3, [r7, #14]
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	2b3f      	cmp	r3, #63	@ 0x3f
 800287e:	d9e2      	bls.n	8002846 <OLED_0in96_rgb_Display+0x38>
        }
    }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002890:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0d      	ldr	r2, [pc, #52]	@ (80028cc <HAL_Init+0x40>)
 8002896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800289a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <HAL_Init+0x40>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <HAL_Init+0x40>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <HAL_Init+0x40>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 f94f 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ba:	200f      	movs	r0, #15
 80028bc:	f000 f808 	bl	80028d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7fe ff86 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_InitTick+0x54>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_InitTick+0x58>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f967 	bl	8002bc2 <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800290c:	f000 f92f 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	@ (800292c <HAL_InitTick+0x5c>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000220 	.word	0x20000220
 8002928:	20000230 	.word	0x20000230
 800292c:	2000022c 	.word	0x2000022c

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000230 	.word	0x20000230
 8002954:	200003e8 	.word	0x200003e8

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200003e8 	.word	0x200003e8

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000230 	.word	0x20000230

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff3e 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff31 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa2 	bl	8002b14 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	@ 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e159      	b.n	8002eac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f040 8148 	bne.w	8002ea6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d005      	beq.n	8002c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d130      	bne.n	8002c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0201 	and.w	r2, r3, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d017      	beq.n	8002ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d123      	bne.n	8002d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a2 	beq.w	8002ea6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b57      	ldr	r3, [pc, #348]	@ (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a56      	ldr	r2, [pc, #344]	@ (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b54      	ldr	r3, [pc, #336]	@ (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7e:	4a52      	ldr	r2, [pc, #328]	@ (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	220f      	movs	r2, #15
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a49      	ldr	r2, [pc, #292]	@ (8002ecc <HAL_GPIO_Init+0x2f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x202>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a48      	ldr	r2, [pc, #288]	@ (8002ed0 <HAL_GPIO_Init+0x2f4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x1fe>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a47      	ldr	r2, [pc, #284]	@ (8002ed4 <HAL_GPIO_Init+0x2f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x1fa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a46      	ldr	r2, [pc, #280]	@ (8002ed8 <HAL_GPIO_Init+0x2fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x1f6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a45      	ldr	r2, [pc, #276]	@ (8002edc <HAL_GPIO_Init+0x300>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x1f2>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x204>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	@ (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b23      	ldr	r3, [pc, #140]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee0 <HAL_GPIO_Init+0x304>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f aea2 	bls.w	8002bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	@ 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef4:	787b      	ldrb	r3, [r7, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f00:	e003      	b.n	8002f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	041a      	lsls	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e267      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f36:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4b85      	ldr	r3, [pc, #532]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d112      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b82      	ldr	r3, [pc, #520]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05b      	beq.n	8003020 <HAL_RCC_OscConfig+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d157      	bne.n	8003020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e242      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x74>
 8002f7e:	4b76      	ldr	r3, [pc, #472]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a75      	ldr	r2, [pc, #468]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x98>
 8002f96:	4b70      	ldr	r3, [pc, #448]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6f      	ldr	r2, [pc, #444]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6c      	ldr	r2, [pc, #432]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002fb0:	4b69      	ldr	r3, [pc, #420]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a68      	ldr	r2, [pc, #416]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b66      	ldr	r3, [pc, #408]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a65      	ldr	r2, [pc, #404]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff fcc2 	bl	8002958 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7ff fcbe 	bl	8002958 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e207      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b5b      	ldr	r3, [pc, #364]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7ff fcae 	bl	8002958 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7ff fcaa 	bl	8002958 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1f3      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b51      	ldr	r3, [pc, #324]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0xe8>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1c7      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4937      	ldr	r1, [pc, #220]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e03a      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x244>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7ff fc63 	bl	8002958 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7ff fc5f 	bl	8002958 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1a8      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b24      	ldr	r3, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x244>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7ff fc42 	bl	8002958 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d8:	f7ff fc3e 	bl	8002958 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e187      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d036      	beq.n	8003170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x248>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7ff fc22 	bl	8002958 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7ff fc1e 	bl	8002958 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e167      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_OscConfig+0x248>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7ff fc0b 	bl	8002958 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003146:	f7ff fc07 	bl	8002958 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d907      	bls.n	8003164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e150      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
 8003158:	40023800 	.word	0x40023800
 800315c:	42470000 	.word	0x42470000
 8003160:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8097 	beq.w	80032ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b81      	ldr	r3, [pc, #516]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	4b7d      	ldr	r3, [pc, #500]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a7c      	ldr	r2, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b7a      	ldr	r3, [pc, #488]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b77      	ldr	r3, [pc, #476]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b74      	ldr	r3, [pc, #464]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a73      	ldr	r2, [pc, #460]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7ff fbc7 	bl	8002958 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7ff fbc3 	bl	8002958 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e10c      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x2ea>
 80031f4:	4b64      	ldr	r3, [pc, #400]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a63      	ldr	r2, [pc, #396]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003200:	e01c      	b.n	800323c <HAL_RCC_OscConfig+0x324>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x30c>
 800320a:	4b5f      	ldr	r3, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a5e      	ldr	r2, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	4b5c      	ldr	r3, [pc, #368]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a5b      	ldr	r2, [pc, #364]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0x324>
 8003224:	4b58      	ldr	r3, [pc, #352]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003230:	4b55      	ldr	r3, [pc, #340]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	4a54      	ldr	r2, [pc, #336]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7ff fb88 	bl	8002958 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7ff fb84 	bl	8002958 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0cb      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ee      	beq.n	800324c <HAL_RCC_OscConfig+0x334>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7ff fb72 	bl	8002958 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7ff fb6e 	bl	8002958 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0b5      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328e:	4b3e      	ldr	r3, [pc, #248]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ee      	bne.n	8003278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	4a38      	ldr	r2, [pc, #224]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a1 	beq.w	80033f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b6:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d05c      	beq.n	800337c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d141      	bne.n	800334e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff fb42 	bl	8002958 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7ff fb3e 	bl	8002958 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e087      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7ff fb17 	bl	8002958 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7ff fb13 	bl	8002958 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e05c      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x416>
 800334c:	e054      	b.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7ff fb00 	bl	8002958 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7ff fafc 	bl	8002958 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e045      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x444>
 800337a:	e03d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e038      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_OscConfig+0x4ec>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d028      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d121      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d11a      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cc      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b68      	ldr	r3, [pc, #416]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d90c      	bls.n	8003444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b65      	ldr	r3, [pc, #404]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e067      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b37      	ldr	r3, [pc, #220]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4934      	ldr	r1, [pc, #208]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7ff fa2e 	bl	8002958 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7ff fa2a 	bl	8002958 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e04f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b25      	ldr	r3, [pc, #148]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20c      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b22      	ldr	r3, [pc, #136]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f98e 	bl	80028d0 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08005e94 	.word	0x08005e94
 80035cc:	20000220 	.word	0x20000220
 80035d0:	2000022c 	.word	0x2000022c

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b090      	sub	sp, #64	@ 0x40
 80035da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ec:	4b59      	ldr	r3, [pc, #356]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d00d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f200 80a1 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x16c>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e09b      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x184>)
 800360a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800360c:	e09b      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b53      	ldr	r3, [pc, #332]	@ (800375c <HAL_RCC_GetSysClockFreq+0x188>)
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003612:	e098      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b4f      	ldr	r3, [pc, #316]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361e:	4b4d      	ldr	r3, [pc, #308]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d028      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	2200      	movs	r2, #0
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	627a      	str	r2, [r7, #36]	@ 0x24
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800363c:	2100      	movs	r1, #0
 800363e:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCC_GetSysClockFreq+0x188>)
 8003640:	fb03 f201 	mul.w	r2, r3, r1
 8003644:	2300      	movs	r3, #0
 8003646:	fb00 f303 	mul.w	r3, r0, r3
 800364a:	4413      	add	r3, r2
 800364c:	4a43      	ldr	r2, [pc, #268]	@ (800375c <HAL_RCC_GetSysClockFreq+0x188>)
 800364e:	fba0 1202 	umull	r1, r2, r0, r2
 8003652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003654:	460a      	mov	r2, r1
 8003656:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365a:	4413      	add	r3, r2
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	2200      	movs	r2, #0
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	61fa      	str	r2, [r7, #28]
 8003666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800366e:	f7fd f9fd 	bl	8000a6c <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4613      	mov	r3, r2
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367a:	e053      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367c:	4b35      	ldr	r3, [pc, #212]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	2200      	movs	r2, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	617a      	str	r2, [r7, #20]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800368e:	f04f 0b00 	mov.w	fp, #0
 8003692:	4652      	mov	r2, sl
 8003694:	465b      	mov	r3, fp
 8003696:	f04f 0000 	mov.w	r0, #0
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	0159      	lsls	r1, r3, #5
 80036a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a4:	0150      	lsls	r0, r2, #5
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	ebb2 080a 	subs.w	r8, r2, sl
 80036ae:	eb63 090b 	sbc.w	r9, r3, fp
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036c6:	ebb2 0408 	subs.w	r4, r2, r8
 80036ca:	eb63 0509 	sbc.w	r5, r3, r9
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	00eb      	lsls	r3, r5, #3
 80036d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036dc:	00e2      	lsls	r2, r4, #3
 80036de:	4614      	mov	r4, r2
 80036e0:	461d      	mov	r5, r3
 80036e2:	eb14 030a 	adds.w	r3, r4, sl
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	eb45 030b 	adc.w	r3, r5, fp
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003704:	4621      	mov	r1, r4
 8003706:	028a      	lsls	r2, r1, #10
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370e:	2200      	movs	r2, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	60fa      	str	r2, [r7, #12]
 8003714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003718:	f7fd f9a8 	bl	8000a6c <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003734:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x184>)
 8003742:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003748:	4618      	mov	r0, r3
 800374a:	3740      	adds	r7, #64	@ 0x40
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	017d7840 	.word	0x017d7840

08003760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e07b      	b.n	800386a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003782:	d009      	beq.n	8003798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
 800378a:	e005      	b.n	8003798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe f834 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0104 	and.w	r1, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f003 0210 	and.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fe f809 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fc61 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e041      	b.n	80039a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f839 	bl	80039ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f000 fc12 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start_IT+0x1e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x46>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0x2e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e00b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x46>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0x3e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x46>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <HAL_TIM_IC_Start_IT+0x58>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e013      	b.n	8003a44 <HAL_TIM_IC_Start_IT+0x80>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d104      	bne.n	8003a2c <HAL_TIM_IC_Start_IT+0x68>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e00b      	b.n	8003a44 <HAL_TIM_IC_Start_IT+0x80>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d104      	bne.n	8003a3c <HAL_TIM_IC_Start_IT+0x78>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e003      	b.n	8003a44 <HAL_TIM_IC_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a46:	7bbb      	ldrb	r3, [r7, #14]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a4c:	7b7b      	ldrb	r3, [r7, #13]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0c2      	b.n	8003bdc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_IC_Start_IT+0xa2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a64:	e013      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xca>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Start_IT+0xb2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a74:	e00b      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xca>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_IC_Start_IT+0xc2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a84:	e003      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xca>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Start_IT+0xda>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a9c:	e013      	b.n	8003ac6 <HAL_TIM_IC_Start_IT+0x102>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_IC_Start_IT+0xea>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	e00b      	b.n	8003ac6 <HAL_TIM_IC_Start_IT+0x102>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_IC_Start_IT+0xfa>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003abc:	e003      	b.n	8003ac6 <HAL_TIM_IC_Start_IT+0x102>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d841      	bhi.n	8003b50 <HAL_TIM_IC_Start_IT+0x18c>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <HAL_TIM_IC_Start_IT+0x110>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003b51 	.word	0x08003b51
 8003adc:	08003b51 	.word	0x08003b51
 8003ae0:	08003b51 	.word	0x08003b51
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b51 	.word	0x08003b51
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b51 	.word	0x08003b51
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b3f 	.word	0x08003b3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0202 	orr.w	r2, r2, #2
 8003b16:	60da      	str	r2, [r3, #12]
      break;
 8003b18:	e01d      	b.n	8003b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0204 	orr.w	r2, r2, #4
 8003b28:	60da      	str	r2, [r3, #12]
      break;
 8003b2a:	e014      	b.n	8003b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0208 	orr.w	r2, r2, #8
 8003b3a:	60da      	str	r2, [r3, #12]
      break;
 8003b3c:	e00b      	b.n	8003b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0210 	orr.w	r2, r2, #16
 8003b4c:	60da      	str	r2, [r3, #12]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13e      	bne.n	8003bda <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2201      	movs	r2, #1
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fd4b 	bl	8004600 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <HAL_TIM_IC_Start_IT+0x220>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7c:	d013      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_TIM_IC_Start_IT+0x224>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <HAL_TIM_IC_Start_IT+0x228>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	@ (8003bf0 <HAL_TIM_IC_Start_IT+0x22c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a14      	ldr	r2, [pc, #80]	@ (8003bf4 <HAL_TIM_IC_Start_IT+0x230>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d111      	bne.n	8003bca <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d010      	beq.n	8003bda <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	e007      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000

08003bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d020      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01b      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0202 	mvn.w	r2, #2
 8003c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fab4 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa76 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa7d 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d020      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01b      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0204 	mvn.w	r2, #4
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fa8e 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa50 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fa57 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0208 	mvn.w	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fa68 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa2a 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fa31 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d020      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fa42 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa04 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa0b 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0201 	mvn.w	r2, #1
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9e2 	bl	8004128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fcda 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9dc 	bl	8004164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0220 	mvn.w	r2, #32
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fcac 	bl	8004728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e088      	b.n	8003f08 <HAL_TIM_IC_ConfigChannel+0x130>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11b      	bne.n	8003e3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003e14:	f000 fa3c 	bl	8004290 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 020c 	bic.w	r2, r2, #12
 8003e26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6999      	ldr	r1, [r3, #24]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	619a      	str	r2, [r3, #24]
 8003e3a:	e060      	b.n	8003efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d11c      	bne.n	8003e7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003e52:	f000 fab4 	bl	80043be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6999      	ldr	r1, [r3, #24]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	021a      	lsls	r2, r3, #8
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	e040      	b.n	8003efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11b      	bne.n	8003eba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e92:	f000 fb01 	bl	8004498 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 020c 	bic.w	r2, r2, #12
 8003ea4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69d9      	ldr	r1, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	61da      	str	r2, [r3, #28]
 8003eb8:	e021      	b.n	8003efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	d11c      	bne.n	8003efa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ed0:	f000 fb1e 	bl	8004510 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ee2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69d9      	ldr	r1, [r3, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021a      	lsls	r2, r3, #8
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	61da      	str	r2, [r3, #28]
 8003ef8:	e001      	b.n	8003efe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_ConfigClockSource+0x1c>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e0b4      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x186>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f64:	d03e      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6a:	f200 8087 	bhi.w	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f72:	f000 8086 	beq.w	8004082 <HAL_TIM_ConfigClockSource+0x172>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d87f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b70      	cmp	r3, #112	@ 0x70
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f80:	2b70      	cmp	r3, #112	@ 0x70
 8003f82:	d87b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b60      	cmp	r3, #96	@ 0x60
 8003f86:	d050      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x11a>
 8003f88:	2b60      	cmp	r3, #96	@ 0x60
 8003f8a:	d877      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b50      	cmp	r3, #80	@ 0x50
 8003f8e:	d03c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xfa>
 8003f90:	2b50      	cmp	r3, #80	@ 0x50
 8003f92:	d873      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b40      	cmp	r3, #64	@ 0x40
 8003f96:	d058      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x13a>
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d86f      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b30      	cmp	r3, #48	@ 0x30
 8003f9e:	d064      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b30      	cmp	r3, #48	@ 0x30
 8003fa2:	d86b      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d060      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d867      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d05a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb4:	e062      	b.n	800407c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	f000 fafb 	bl	80045c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
      break;
 8003fe2:	e04f      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	f000 fae4 	bl	80045c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e03c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004016:	461a      	mov	r2, r3
 8004018:	f000 f9a2 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2150      	movs	r1, #80	@ 0x50
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fab1 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004028:	e02c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 f9fe 	bl	8004438 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2160      	movs	r1, #96	@ 0x60
 8004042:	4618      	mov	r0, r3
 8004044:	f000 faa1 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004048:	e01c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 f982 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2140      	movs	r1, #64	@ 0x40
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fa91 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8004068:	e00c      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f000 fa88 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 800407a:	e003      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e000      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d831      	bhi.n	8004118 <HAL_TIM_ReadCapturedValue+0x78>
 80040b4:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	08004119 	.word	0x08004119
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004119 	.word	0x08004119
 80040cc:	080040fb 	.word	0x080040fb
 80040d0:	08004119 	.word	0x08004119
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004105 	.word	0x08004105
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004119 	.word	0x08004119
 80040e8:	08004119 	.word	0x08004119
 80040ec:	0800410f 	.word	0x0800410f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f6:	60fb      	str	r3, [r7, #12]

      break;
 80040f8:	e00f      	b.n	800411a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	60fb      	str	r3, [r7, #12]

      break;
 8004102:	e00a      	b.n	800411a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	60fb      	str	r3, [r7, #12]

      break;
 800410c:	e005      	b.n	800411a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	60fb      	str	r3, [r7, #12]

      break;
 8004116:	e000      	b.n	800411a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004118:	bf00      	nop
  }

  return tmpreg;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3a      	ldr	r2, [pc, #232]	@ (8004274 <TIM_Base_SetConfig+0xfc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a37      	ldr	r2, [pc, #220]	@ (8004278 <TIM_Base_SetConfig+0x100>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a36      	ldr	r2, [pc, #216]	@ (800427c <TIM_Base_SetConfig+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a35      	ldr	r2, [pc, #212]	@ (8004280 <TIM_Base_SetConfig+0x108>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004274 <TIM_Base_SetConfig+0xfc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01b      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d017      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a28      	ldr	r2, [pc, #160]	@ (8004278 <TIM_Base_SetConfig+0x100>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a27      	ldr	r2, [pc, #156]	@ (800427c <TIM_Base_SetConfig+0x104>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00f      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a26      	ldr	r2, [pc, #152]	@ (8004280 <TIM_Base_SetConfig+0x108>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a25      	ldr	r2, [pc, #148]	@ (8004284 <TIM_Base_SetConfig+0x10c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a24      	ldr	r2, [pc, #144]	@ (8004288 <TIM_Base_SetConfig+0x110>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a23      	ldr	r2, [pc, #140]	@ (800428c <TIM_Base_SetConfig+0x114>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a0e      	ldr	r2, [pc, #56]	@ (8004274 <TIM_Base_SetConfig+0xfc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d103      	bne.n	8004248 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]
  }
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800

08004290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0201 	bic.w	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a24      	ldr	r2, [pc, #144]	@ (800434c <TIM_TI1_SetConfig+0xbc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <TIM_TI1_SetConfig+0x56>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d00f      	beq.n	80042e6 <TIM_TI1_SetConfig+0x56>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a21      	ldr	r2, [pc, #132]	@ (8004350 <TIM_TI1_SetConfig+0xc0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_TI1_SetConfig+0x56>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a20      	ldr	r2, [pc, #128]	@ (8004354 <TIM_TI1_SetConfig+0xc4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_TI1_SetConfig+0x56>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <TIM_TI1_SetConfig+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_TI1_SetConfig+0x56>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <TIM_TI1_SetConfig+0xcc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <TIM_TI1_SetConfig+0x5a>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <TIM_TI1_SetConfig+0x5c>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e003      	b.n	800430a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	b2db      	uxtb	r3, r3
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 030a 	and.w	r3, r3, #10
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000

08004360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0201 	bic.w	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 030a 	bic.w	r3, r3, #10
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	b29b      	uxth	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	031b      	lsls	r3, r3, #12
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004474:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f023 0303 	bic.w	r3, r3, #3
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	031b      	lsls	r3, r3, #12
 8004554:	b29b      	uxth	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004562:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	031b      	lsls	r3, r3, #12
 8004568:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f043 0307 	orr.w	r3, r3, #7
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2201      	movs	r2, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e050      	b.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d013      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a15      	ldr	r2, [pc, #84]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10c      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <malloc>:
 8004750:	4b02      	ldr	r3, [pc, #8]	@ (800475c <malloc+0xc>)
 8004752:	4601      	mov	r1, r0
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 b825 	b.w	80047a4 <_malloc_r>
 800475a:	bf00      	nop
 800475c:	20000240 	.word	0x20000240

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0f      	ldr	r6, [pc, #60]	@ (80047a0 <sbrk_aligned+0x40>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fa00 	bl	8004b70 <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f9fb 	bl	8004b70 <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d103      	bne.n	8004786 <sbrk_aligned+0x26>
 800477e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004782:	4620      	mov	r0, r4
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	1cc4      	adds	r4, r0, #3
 8004788:	f024 0403 	bic.w	r4, r4, #3
 800478c:	42a0      	cmp	r0, r4
 800478e:	d0f8      	beq.n	8004782 <sbrk_aligned+0x22>
 8004790:	1a21      	subs	r1, r4, r0
 8004792:	4628      	mov	r0, r5
 8004794:	f000 f9ec 	bl	8004b70 <_sbrk_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d1f2      	bne.n	8004782 <sbrk_aligned+0x22>
 800479c:	e7ef      	b.n	800477e <sbrk_aligned+0x1e>
 800479e:	bf00      	nop
 80047a0:	200003ec 	.word	0x200003ec

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d904      	bls.n	80047ca <_malloc_r+0x26>
 80047c0:	230c      	movs	r3, #12
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a0 <_malloc_r+0xfc>
 80047ce:	f000 f869 	bl	80048a4 <__malloc_lock>
 80047d2:	f8d8 3000 	ldr.w	r3, [r8]
 80047d6:	461c      	mov	r4, r3
 80047d8:	bb44      	cbnz	r4, 800482c <_malloc_r+0x88>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff ffbf 	bl	8004760 <sbrk_aligned>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	4604      	mov	r4, r0
 80047e6:	d158      	bne.n	800489a <_malloc_r+0xf6>
 80047e8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ec:	4627      	mov	r7, r4
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d143      	bne.n	800487a <_malloc_r+0xd6>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d04b      	beq.n	800488e <_malloc_r+0xea>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	eb04 0903 	add.w	r9, r4, r3
 8004800:	f000 f9b6 	bl	8004b70 <_sbrk_r>
 8004804:	4581      	cmp	r9, r0
 8004806:	d142      	bne.n	800488e <_malloc_r+0xea>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	1a6d      	subs	r5, r5, r1
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff ffa6 	bl	8004760 <sbrk_aligned>
 8004814:	3001      	adds	r0, #1
 8004816:	d03a      	beq.n	800488e <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	442b      	add	r3, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	bb62      	cbnz	r2, 8004880 <_malloc_r+0xdc>
 8004826:	f8c8 7000 	str.w	r7, [r8]
 800482a:	e00f      	b.n	800484c <_malloc_r+0xa8>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1b52      	subs	r2, r2, r5
 8004830:	d420      	bmi.n	8004874 <_malloc_r+0xd0>
 8004832:	2a0b      	cmp	r2, #11
 8004834:	d917      	bls.n	8004866 <_malloc_r+0xc2>
 8004836:	1961      	adds	r1, r4, r5
 8004838:	42a3      	cmp	r3, r4
 800483a:	6025      	str	r5, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	6059      	strne	r1, [r3, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	bf08      	it	eq
 8004844:	f8c8 1000 	streq.w	r1, [r8]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f82f 	bl	80048b0 <__malloc_unlock>
 8004852:	f104 000b 	add.w	r0, r4, #11
 8004856:	1d23      	adds	r3, r4, #4
 8004858:	f020 0007 	bic.w	r0, r0, #7
 800485c:	1ac2      	subs	r2, r0, r3
 800485e:	bf1c      	itt	ne
 8004860:	1a1b      	subne	r3, r3, r0
 8004862:	50a3      	strne	r3, [r4, r2]
 8004864:	e7af      	b.n	80047c6 <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	f8c8 2000 	streq.w	r2, [r8]
 8004870:	605a      	strne	r2, [r3, #4]
 8004872:	e7eb      	b.n	800484c <_malloc_r+0xa8>
 8004874:	4623      	mov	r3, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7ae      	b.n	80047d8 <_malloc_r+0x34>
 800487a:	463c      	mov	r4, r7
 800487c:	687f      	ldr	r7, [r7, #4]
 800487e:	e7b6      	b.n	80047ee <_malloc_r+0x4a>
 8004880:	461a      	mov	r2, r3
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	42a3      	cmp	r3, r4
 8004886:	d1fb      	bne.n	8004880 <_malloc_r+0xdc>
 8004888:	2300      	movs	r3, #0
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa8>
 800488e:	230c      	movs	r3, #12
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f80c 	bl	80048b0 <__malloc_unlock>
 8004898:	e794      	b.n	80047c4 <_malloc_r+0x20>
 800489a:	6005      	str	r5, [r0, #0]
 800489c:	e7d6      	b.n	800484c <_malloc_r+0xa8>
 800489e:	bf00      	nop
 80048a0:	200003f0 	.word	0x200003f0

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_lock+0x8>)
 80048a6:	f000 b99e 	b.w	8004be6 <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	20000530 	.word	0x20000530

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f000 b999 	b.w	8004be8 <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	20000530 	.word	0x20000530

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	b500      	push	{lr}
 80048c0:	b09c      	sub	sp, #112	@ 0x70
 80048c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048c4:	9002      	str	r0, [sp, #8]
 80048c6:	9006      	str	r0, [sp, #24]
 80048c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048cc:	4809      	ldr	r0, [pc, #36]	@ (80048f4 <siprintf+0x38>)
 80048ce:	9107      	str	r1, [sp, #28]
 80048d0:	9104      	str	r1, [sp, #16]
 80048d2:	4909      	ldr	r1, [pc, #36]	@ (80048f8 <siprintf+0x3c>)
 80048d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d8:	9105      	str	r1, [sp, #20]
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	a902      	add	r1, sp, #8
 80048e0:	f000 fa2a 	bl	8004d38 <_svfiprintf_r>
 80048e4:	9b02      	ldr	r3, [sp, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	b01c      	add	sp, #112	@ 0x70
 80048ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	20000240 	.word	0x20000240
 80048f8:	ffff0208 	.word	0xffff0208

080048fc <std>:
 80048fc:	2300      	movs	r3, #0
 80048fe:	b510      	push	{r4, lr}
 8004900:	4604      	mov	r4, r0
 8004902:	e9c0 3300 	strd	r3, r3, [r0]
 8004906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800490a:	6083      	str	r3, [r0, #8]
 800490c:	8181      	strh	r1, [r0, #12]
 800490e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004910:	81c2      	strh	r2, [r0, #14]
 8004912:	6183      	str	r3, [r0, #24]
 8004914:	4619      	mov	r1, r3
 8004916:	2208      	movs	r2, #8
 8004918:	305c      	adds	r0, #92	@ 0x5c
 800491a:	f000 f921 	bl	8004b60 <memset>
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <std+0x58>)
 8004920:	6263      	str	r3, [r4, #36]	@ 0x24
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <std+0x5c>)
 8004924:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <std+0x60>)
 8004928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800492a:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <std+0x64>)
 800492c:	6323      	str	r3, [r4, #48]	@ 0x30
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <std+0x68>)
 8004930:	6224      	str	r4, [r4, #32]
 8004932:	429c      	cmp	r4, r3
 8004934:	d006      	beq.n	8004944 <std+0x48>
 8004936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800493a:	4294      	cmp	r4, r2
 800493c:	d002      	beq.n	8004944 <std+0x48>
 800493e:	33d0      	adds	r3, #208	@ 0xd0
 8004940:	429c      	cmp	r4, r3
 8004942:	d105      	bne.n	8004950 <std+0x54>
 8004944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f000 b94a 	b.w	8004be4 <__retarget_lock_init_recursive>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	08005629 	.word	0x08005629
 8004958:	0800564b 	.word	0x0800564b
 800495c:	08005683 	.word	0x08005683
 8004960:	080056a7 	.word	0x080056a7
 8004964:	200003f4 	.word	0x200003f4

08004968 <stdio_exit_handler>:
 8004968:	4a02      	ldr	r2, [pc, #8]	@ (8004974 <stdio_exit_handler+0xc>)
 800496a:	4903      	ldr	r1, [pc, #12]	@ (8004978 <stdio_exit_handler+0x10>)
 800496c:	4803      	ldr	r0, [pc, #12]	@ (800497c <stdio_exit_handler+0x14>)
 800496e:	f000 b869 	b.w	8004a44 <_fwalk_sglue>
 8004972:	bf00      	nop
 8004974:	20000234 	.word	0x20000234
 8004978:	080055d9 	.word	0x080055d9
 800497c:	20000244 	.word	0x20000244

08004980 <cleanup_stdio>:
 8004980:	6841      	ldr	r1, [r0, #4]
 8004982:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <cleanup_stdio+0x34>)
 8004984:	4299      	cmp	r1, r3
 8004986:	b510      	push	{r4, lr}
 8004988:	4604      	mov	r4, r0
 800498a:	d001      	beq.n	8004990 <cleanup_stdio+0x10>
 800498c:	f000 fe24 	bl	80055d8 <_fflush_r>
 8004990:	68a1      	ldr	r1, [r4, #8]
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <cleanup_stdio+0x38>)
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <cleanup_stdio+0x1e>
 8004998:	4620      	mov	r0, r4
 800499a:	f000 fe1d 	bl	80055d8 <_fflush_r>
 800499e:	68e1      	ldr	r1, [r4, #12]
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <cleanup_stdio+0x3c>)
 80049a2:	4299      	cmp	r1, r3
 80049a4:	d004      	beq.n	80049b0 <cleanup_stdio+0x30>
 80049a6:	4620      	mov	r0, r4
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ac:	f000 be14 	b.w	80055d8 <_fflush_r>
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	200003f4 	.word	0x200003f4
 80049b8:	2000045c 	.word	0x2000045c
 80049bc:	200004c4 	.word	0x200004c4

080049c0 <global_stdio_init.part.0>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <global_stdio_init.part.0+0x30>)
 80049c4:	4c0b      	ldr	r4, [pc, #44]	@ (80049f4 <global_stdio_init.part.0+0x34>)
 80049c6:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <global_stdio_init.part.0+0x38>)
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	4620      	mov	r0, r4
 80049cc:	2200      	movs	r2, #0
 80049ce:	2104      	movs	r1, #4
 80049d0:	f7ff ff94 	bl	80048fc <std>
 80049d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049d8:	2201      	movs	r2, #1
 80049da:	2109      	movs	r1, #9
 80049dc:	f7ff ff8e 	bl	80048fc <std>
 80049e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049e4:	2202      	movs	r2, #2
 80049e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ea:	2112      	movs	r1, #18
 80049ec:	f7ff bf86 	b.w	80048fc <std>
 80049f0:	2000052c 	.word	0x2000052c
 80049f4:	200003f4 	.word	0x200003f4
 80049f8:	08004969 	.word	0x08004969

080049fc <__sfp_lock_acquire>:
 80049fc:	4801      	ldr	r0, [pc, #4]	@ (8004a04 <__sfp_lock_acquire+0x8>)
 80049fe:	f000 b8f2 	b.w	8004be6 <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000531 	.word	0x20000531

08004a08 <__sfp_lock_release>:
 8004a08:	4801      	ldr	r0, [pc, #4]	@ (8004a10 <__sfp_lock_release+0x8>)
 8004a0a:	f000 b8ed 	b.w	8004be8 <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000531 	.word	0x20000531

08004a14 <__sinit>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4604      	mov	r4, r0
 8004a18:	f7ff fff0 	bl	80049fc <__sfp_lock_acquire>
 8004a1c:	6a23      	ldr	r3, [r4, #32]
 8004a1e:	b11b      	cbz	r3, 8004a28 <__sinit+0x14>
 8004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a24:	f7ff bff0 	b.w	8004a08 <__sfp_lock_release>
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__sinit+0x28>)
 8004a2a:	6223      	str	r3, [r4, #32]
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <__sinit+0x2c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f5      	bne.n	8004a20 <__sinit+0xc>
 8004a34:	f7ff ffc4 	bl	80049c0 <global_stdio_init.part.0>
 8004a38:	e7f2      	b.n	8004a20 <__sinit+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	08004981 	.word	0x08004981
 8004a40:	2000052c 	.word	0x2000052c

08004a44 <_fwalk_sglue>:
 8004a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a48:	4607      	mov	r7, r0
 8004a4a:	4688      	mov	r8, r1
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a54:	f1b9 0901 	subs.w	r9, r9, #1
 8004a58:	d505      	bpl.n	8004a66 <_fwalk_sglue+0x22>
 8004a5a:	6824      	ldr	r4, [r4, #0]
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d1f7      	bne.n	8004a50 <_fwalk_sglue+0xc>
 8004a60:	4630      	mov	r0, r6
 8004a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d907      	bls.n	8004a7c <_fwalk_sglue+0x38>
 8004a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a70:	3301      	adds	r3, #1
 8004a72:	d003      	beq.n	8004a7c <_fwalk_sglue+0x38>
 8004a74:	4629      	mov	r1, r5
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c0      	blx	r8
 8004a7a:	4306      	orrs	r6, r0
 8004a7c:	3568      	adds	r5, #104	@ 0x68
 8004a7e:	e7e9      	b.n	8004a54 <_fwalk_sglue+0x10>

08004a80 <iprintf>:
 8004a80:	b40f      	push	{r0, r1, r2, r3}
 8004a82:	b507      	push	{r0, r1, r2, lr}
 8004a84:	4906      	ldr	r1, [pc, #24]	@ (8004aa0 <iprintf+0x20>)
 8004a86:	ab04      	add	r3, sp, #16
 8004a88:	6808      	ldr	r0, [r1, #0]
 8004a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a8e:	6881      	ldr	r1, [r0, #8]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	f000 fa77 	bl	8004f84 <_vfiprintf_r>
 8004a96:	b003      	add	sp, #12
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	20000240 	.word	0x20000240

08004aa4 <_puts_r>:
 8004aa4:	6a03      	ldr	r3, [r0, #32]
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	6884      	ldr	r4, [r0, #8]
 8004aaa:	4605      	mov	r5, r0
 8004aac:	460e      	mov	r6, r1
 8004aae:	b90b      	cbnz	r3, 8004ab4 <_puts_r+0x10>
 8004ab0:	f7ff ffb0 	bl	8004a14 <__sinit>
 8004ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab6:	07db      	lsls	r3, r3, #31
 8004ab8:	d405      	bmi.n	8004ac6 <_puts_r+0x22>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	0598      	lsls	r0, r3, #22
 8004abe:	d402      	bmi.n	8004ac6 <_puts_r+0x22>
 8004ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ac2:	f000 f890 	bl	8004be6 <__retarget_lock_acquire_recursive>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	0719      	lsls	r1, r3, #28
 8004aca:	d502      	bpl.n	8004ad2 <_puts_r+0x2e>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d135      	bne.n	8004b3e <_puts_r+0x9a>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 fe57 	bl	8005788 <__swsetup_r>
 8004ada:	b380      	cbz	r0, 8004b3e <_puts_r+0x9a>
 8004adc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ae2:	07da      	lsls	r2, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_puts_r+0x4e>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	059b      	lsls	r3, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_puts_r+0x4e>
 8004aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aee:	f000 f87b 	bl	8004be8 <__retarget_lock_release_recursive>
 8004af2:	4628      	mov	r0, r5
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da04      	bge.n	8004b04 <_puts_r+0x60>
 8004afa:	69a2      	ldr	r2, [r4, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	dc17      	bgt.n	8004b30 <_puts_r+0x8c>
 8004b00:	290a      	cmp	r1, #10
 8004b02:	d015      	beq.n	8004b30 <_puts_r+0x8c>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	7019      	strb	r1, [r3, #0]
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b12:	3b01      	subs	r3, #1
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d1ed      	bne.n	8004af6 <_puts_r+0x52>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da11      	bge.n	8004b42 <_puts_r+0x9e>
 8004b1e:	4622      	mov	r2, r4
 8004b20:	210a      	movs	r1, #10
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 fdf1 	bl	800570a <__swbuf_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d0d7      	beq.n	8004adc <_puts_r+0x38>
 8004b2c:	250a      	movs	r5, #10
 8004b2e:	e7d7      	b.n	8004ae0 <_puts_r+0x3c>
 8004b30:	4622      	mov	r2, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fde9 	bl	800570a <__swbuf_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1e7      	bne.n	8004b0c <_puts_r+0x68>
 8004b3c:	e7ce      	b.n	8004adc <_puts_r+0x38>
 8004b3e:	3e01      	subs	r6, #1
 8004b40:	e7e4      	b.n	8004b0c <_puts_r+0x68>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	220a      	movs	r2, #10
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e7ee      	b.n	8004b2c <_puts_r+0x88>
	...

08004b50 <puts>:
 8004b50:	4b02      	ldr	r3, [pc, #8]	@ (8004b5c <puts+0xc>)
 8004b52:	4601      	mov	r1, r0
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	f7ff bfa5 	b.w	8004aa4 <_puts_r>
 8004b5a:	bf00      	nop
 8004b5c:	20000240 	.word	0x20000240

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <_sbrk_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d06      	ldr	r5, [pc, #24]	@ (8004b8c <_sbrk_r+0x1c>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fc ffd4 	bl	8001b28 <_sbrk>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_sbrk_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_sbrk_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20000534 	.word	0x20000534

08004b90 <__errno>:
 8004b90:	4b01      	ldr	r3, [pc, #4]	@ (8004b98 <__errno+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000240 	.word	0x20000240

08004b9c <__libc_init_array>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004bd4 <__libc_init_array+0x38>)
 8004ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8004bd8 <__libc_init_array+0x3c>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	d109      	bne.n	8004bc0 <__libc_init_array+0x24>
 8004bac:	4d0b      	ldr	r5, [pc, #44]	@ (8004bdc <__libc_init_array+0x40>)
 8004bae:	4c0c      	ldr	r4, [pc, #48]	@ (8004be0 <__libc_init_array+0x44>)
 8004bb0:	f000 ff3a 	bl	8005a28 <_init>
 8004bb4:	1b64      	subs	r4, r4, r5
 8004bb6:	10a4      	asrs	r4, r4, #2
 8004bb8:	2600      	movs	r6, #0
 8004bba:	42a6      	cmp	r6, r4
 8004bbc:	d105      	bne.n	8004bca <__libc_init_array+0x2e>
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc4:	4798      	blx	r3
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7ee      	b.n	8004ba8 <__libc_init_array+0xc>
 8004bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bce:	4798      	blx	r3
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7f2      	b.n	8004bba <__libc_init_array+0x1e>
 8004bd4:	0800eac0 	.word	0x0800eac0
 8004bd8:	0800eac0 	.word	0x0800eac0
 8004bdc:	0800eac0 	.word	0x0800eac0
 8004be0:	0800eac4 	.word	0x0800eac4

08004be4 <__retarget_lock_init_recursive>:
 8004be4:	4770      	bx	lr

08004be6 <__retarget_lock_acquire_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_release_recursive>:
 8004be8:	4770      	bx	lr
	...

08004bec <_free_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4605      	mov	r5, r0
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	d041      	beq.n	8004c78 <_free_r+0x8c>
 8004bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bf8:	1f0c      	subs	r4, r1, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfb8      	it	lt
 8004bfe:	18e4      	addlt	r4, r4, r3
 8004c00:	f7ff fe50 	bl	80048a4 <__malloc_lock>
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <_free_r+0x90>)
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	b933      	cbnz	r3, 8004c18 <_free_r+0x2c>
 8004c0a:	6063      	str	r3, [r4, #4]
 8004c0c:	6014      	str	r4, [r2, #0]
 8004c0e:	4628      	mov	r0, r5
 8004c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c14:	f7ff be4c 	b.w	80048b0 <__malloc_unlock>
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	d908      	bls.n	8004c2e <_free_r+0x42>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	1821      	adds	r1, r4, r0
 8004c20:	428b      	cmp	r3, r1
 8004c22:	bf01      	itttt	eq
 8004c24:	6819      	ldreq	r1, [r3, #0]
 8004c26:	685b      	ldreq	r3, [r3, #4]
 8004c28:	1809      	addeq	r1, r1, r0
 8004c2a:	6021      	streq	r1, [r4, #0]
 8004c2c:	e7ed      	b.n	8004c0a <_free_r+0x1e>
 8004c2e:	461a      	mov	r2, r3
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b10b      	cbz	r3, 8004c38 <_free_r+0x4c>
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d9fa      	bls.n	8004c2e <_free_r+0x42>
 8004c38:	6811      	ldr	r1, [r2, #0]
 8004c3a:	1850      	adds	r0, r2, r1
 8004c3c:	42a0      	cmp	r0, r4
 8004c3e:	d10b      	bne.n	8004c58 <_free_r+0x6c>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	4401      	add	r1, r0
 8004c44:	1850      	adds	r0, r2, r1
 8004c46:	4283      	cmp	r3, r0
 8004c48:	6011      	str	r1, [r2, #0]
 8004c4a:	d1e0      	bne.n	8004c0e <_free_r+0x22>
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	6053      	str	r3, [r2, #4]
 8004c52:	4408      	add	r0, r1
 8004c54:	6010      	str	r0, [r2, #0]
 8004c56:	e7da      	b.n	8004c0e <_free_r+0x22>
 8004c58:	d902      	bls.n	8004c60 <_free_r+0x74>
 8004c5a:	230c      	movs	r3, #12
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	e7d6      	b.n	8004c0e <_free_r+0x22>
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	1821      	adds	r1, r4, r0
 8004c64:	428b      	cmp	r3, r1
 8004c66:	bf04      	itt	eq
 8004c68:	6819      	ldreq	r1, [r3, #0]
 8004c6a:	685b      	ldreq	r3, [r3, #4]
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	bf04      	itt	eq
 8004c70:	1809      	addeq	r1, r1, r0
 8004c72:	6021      	streq	r1, [r4, #0]
 8004c74:	6054      	str	r4, [r2, #4]
 8004c76:	e7ca      	b.n	8004c0e <_free_r+0x22>
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200003f0 	.word	0x200003f0

08004c80 <__ssputs_r>:
 8004c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	688e      	ldr	r6, [r1, #8]
 8004c86:	461f      	mov	r7, r3
 8004c88:	42be      	cmp	r6, r7
 8004c8a:	680b      	ldr	r3, [r1, #0]
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	4690      	mov	r8, r2
 8004c92:	d82d      	bhi.n	8004cf0 <__ssputs_r+0x70>
 8004c94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c9c:	d026      	beq.n	8004cec <__ssputs_r+0x6c>
 8004c9e:	6965      	ldr	r5, [r4, #20]
 8004ca0:	6909      	ldr	r1, [r1, #16]
 8004ca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ca6:	eba3 0901 	sub.w	r9, r3, r1
 8004caa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cae:	1c7b      	adds	r3, r7, #1
 8004cb0:	444b      	add	r3, r9
 8004cb2:	106d      	asrs	r5, r5, #1
 8004cb4:	429d      	cmp	r5, r3
 8004cb6:	bf38      	it	cc
 8004cb8:	461d      	movcc	r5, r3
 8004cba:	0553      	lsls	r3, r2, #21
 8004cbc:	d527      	bpl.n	8004d0e <__ssputs_r+0x8e>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f7ff fd70 	bl	80047a4 <_malloc_r>
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	b360      	cbz	r0, 8004d22 <__ssputs_r+0xa2>
 8004cc8:	6921      	ldr	r1, [r4, #16]
 8004cca:	464a      	mov	r2, r9
 8004ccc:	f000 fe96 	bl	80059fc <memcpy>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	6126      	str	r6, [r4, #16]
 8004cde:	6165      	str	r5, [r4, #20]
 8004ce0:	444e      	add	r6, r9
 8004ce2:	eba5 0509 	sub.w	r5, r5, r9
 8004ce6:	6026      	str	r6, [r4, #0]
 8004ce8:	60a5      	str	r5, [r4, #8]
 8004cea:	463e      	mov	r6, r7
 8004cec:	42be      	cmp	r6, r7
 8004cee:	d900      	bls.n	8004cf2 <__ssputs_r+0x72>
 8004cf0:	463e      	mov	r6, r7
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	f000 fdfe 	bl	80058f8 <memmove>
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	1b9b      	subs	r3, r3, r6
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4433      	add	r3, r6
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0e:	462a      	mov	r2, r5
 8004d10:	f000 fccd 	bl	80056ae <_realloc_r>
 8004d14:	4606      	mov	r6, r0
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d1e0      	bne.n	8004cdc <__ssputs_r+0x5c>
 8004d1a:	6921      	ldr	r1, [r4, #16]
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	f7ff ff65 	bl	8004bec <_free_r>
 8004d22:	230c      	movs	r3, #12
 8004d24:	f8ca 3000 	str.w	r3, [sl]
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d34:	e7e9      	b.n	8004d0a <__ssputs_r+0x8a>
	...

08004d38 <_svfiprintf_r>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	4698      	mov	r8, r3
 8004d3e:	898b      	ldrh	r3, [r1, #12]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	b09d      	sub	sp, #116	@ 0x74
 8004d44:	4607      	mov	r7, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	d510      	bpl.n	8004d6e <_svfiprintf_r+0x36>
 8004d4c:	690b      	ldr	r3, [r1, #16]
 8004d4e:	b973      	cbnz	r3, 8004d6e <_svfiprintf_r+0x36>
 8004d50:	2140      	movs	r1, #64	@ 0x40
 8004d52:	f7ff fd27 	bl	80047a4 <_malloc_r>
 8004d56:	6028      	str	r0, [r5, #0]
 8004d58:	6128      	str	r0, [r5, #16]
 8004d5a:	b930      	cbnz	r0, 8004d6a <_svfiprintf_r+0x32>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d64:	b01d      	add	sp, #116	@ 0x74
 8004d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6a:	2340      	movs	r3, #64	@ 0x40
 8004d6c:	616b      	str	r3, [r5, #20]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d72:	2320      	movs	r3, #32
 8004d74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d7c:	2330      	movs	r3, #48	@ 0x30
 8004d7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f1c <_svfiprintf_r+0x1e4>
 8004d82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d86:	f04f 0901 	mov.w	r9, #1
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	469a      	mov	sl, r3
 8004d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d92:	b10a      	cbz	r2, 8004d98 <_svfiprintf_r+0x60>
 8004d94:	2a25      	cmp	r2, #37	@ 0x25
 8004d96:	d1f9      	bne.n	8004d8c <_svfiprintf_r+0x54>
 8004d98:	ebba 0b04 	subs.w	fp, sl, r4
 8004d9c:	d00b      	beq.n	8004db6 <_svfiprintf_r+0x7e>
 8004d9e:	465b      	mov	r3, fp
 8004da0:	4622      	mov	r2, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ff6b 	bl	8004c80 <__ssputs_r>
 8004daa:	3001      	adds	r0, #1
 8004dac:	f000 80a7 	beq.w	8004efe <_svfiprintf_r+0x1c6>
 8004db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004db2:	445a      	add	r2, fp
 8004db4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004db6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 809f 	beq.w	8004efe <_svfiprintf_r+0x1c6>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dca:	f10a 0a01 	add.w	sl, sl, #1
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2205      	movs	r2, #5
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	484e      	ldr	r0, [pc, #312]	@ (8004f1c <_svfiprintf_r+0x1e4>)
 8004de2:	f7fb f9fd 	bl	80001e0 <memchr>
 8004de6:	9a04      	ldr	r2, [sp, #16]
 8004de8:	b9d8      	cbnz	r0, 8004e22 <_svfiprintf_r+0xea>
 8004dea:	06d0      	lsls	r0, r2, #27
 8004dec:	bf44      	itt	mi
 8004dee:	2320      	movmi	r3, #32
 8004df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004df4:	0711      	lsls	r1, r2, #28
 8004df6:	bf44      	itt	mi
 8004df8:	232b      	movmi	r3, #43	@ 0x2b
 8004dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e04:	d015      	beq.n	8004e32 <_svfiprintf_r+0xfa>
 8004e06:	9a07      	ldr	r2, [sp, #28]
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	4621      	mov	r1, r4
 8004e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e16:	3b30      	subs	r3, #48	@ 0x30
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d94b      	bls.n	8004eb4 <_svfiprintf_r+0x17c>
 8004e1c:	b1b0      	cbz	r0, 8004e4c <_svfiprintf_r+0x114>
 8004e1e:	9207      	str	r2, [sp, #28]
 8004e20:	e014      	b.n	8004e4c <_svfiprintf_r+0x114>
 8004e22:	eba0 0308 	sub.w	r3, r0, r8
 8004e26:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	e7d2      	b.n	8004dd8 <_svfiprintf_r+0xa0>
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9103      	str	r1, [sp, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfbb      	ittet	lt
 8004e3e:	425b      	neglt	r3, r3
 8004e40:	f042 0202 	orrlt.w	r2, r2, #2
 8004e44:	9307      	strge	r3, [sp, #28]
 8004e46:	9307      	strlt	r3, [sp, #28]
 8004e48:	bfb8      	it	lt
 8004e4a:	9204      	strlt	r2, [sp, #16]
 8004e4c:	7823      	ldrb	r3, [r4, #0]
 8004e4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e50:	d10a      	bne.n	8004e68 <_svfiprintf_r+0x130>
 8004e52:	7863      	ldrb	r3, [r4, #1]
 8004e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e56:	d132      	bne.n	8004ebe <_svfiprintf_r+0x186>
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	9203      	str	r2, [sp, #12]
 8004e60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e64:	3402      	adds	r4, #2
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f2c <_svfiprintf_r+0x1f4>
 8004e6c:	7821      	ldrb	r1, [r4, #0]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4650      	mov	r0, sl
 8004e72:	f7fb f9b5 	bl	80001e0 <memchr>
 8004e76:	b138      	cbz	r0, 8004e88 <_svfiprintf_r+0x150>
 8004e78:	9b04      	ldr	r3, [sp, #16]
 8004e7a:	eba0 000a 	sub.w	r0, r0, sl
 8004e7e:	2240      	movs	r2, #64	@ 0x40
 8004e80:	4082      	lsls	r2, r0
 8004e82:	4313      	orrs	r3, r2
 8004e84:	3401      	adds	r4, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8c:	4824      	ldr	r0, [pc, #144]	@ (8004f20 <_svfiprintf_r+0x1e8>)
 8004e8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e92:	2206      	movs	r2, #6
 8004e94:	f7fb f9a4 	bl	80001e0 <memchr>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d036      	beq.n	8004f0a <_svfiprintf_r+0x1d2>
 8004e9c:	4b21      	ldr	r3, [pc, #132]	@ (8004f24 <_svfiprintf_r+0x1ec>)
 8004e9e:	bb1b      	cbnz	r3, 8004ee8 <_svfiprintf_r+0x1b0>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	3307      	adds	r3, #7
 8004ea4:	f023 0307 	bic.w	r3, r3, #7
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	9303      	str	r3, [sp, #12]
 8004eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eae:	4433      	add	r3, r6
 8004eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb2:	e76a      	b.n	8004d8a <_svfiprintf_r+0x52>
 8004eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eb8:	460c      	mov	r4, r1
 8004eba:	2001      	movs	r0, #1
 8004ebc:	e7a8      	b.n	8004e10 <_svfiprintf_r+0xd8>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	3401      	adds	r4, #1
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f04f 0c0a 	mov.w	ip, #10
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed0:	3a30      	subs	r2, #48	@ 0x30
 8004ed2:	2a09      	cmp	r2, #9
 8004ed4:	d903      	bls.n	8004ede <_svfiprintf_r+0x1a6>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0c6      	beq.n	8004e68 <_svfiprintf_r+0x130>
 8004eda:	9105      	str	r1, [sp, #20]
 8004edc:	e7c4      	b.n	8004e68 <_svfiprintf_r+0x130>
 8004ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e7f0      	b.n	8004eca <_svfiprintf_r+0x192>
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	462a      	mov	r2, r5
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <_svfiprintf_r+0x1f0>)
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	1c42      	adds	r2, r0, #1
 8004efa:	4606      	mov	r6, r0
 8004efc:	d1d6      	bne.n	8004eac <_svfiprintf_r+0x174>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	065b      	lsls	r3, r3, #25
 8004f02:	f53f af2d 	bmi.w	8004d60 <_svfiprintf_r+0x28>
 8004f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f08:	e72c      	b.n	8004d64 <_svfiprintf_r+0x2c>
 8004f0a:	ab03      	add	r3, sp, #12
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	462a      	mov	r2, r5
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <_svfiprintf_r+0x1f0>)
 8004f12:	a904      	add	r1, sp, #16
 8004f14:	4638      	mov	r0, r7
 8004f16:	f000 f9bb 	bl	8005290 <_printf_i>
 8004f1a:	e7ed      	b.n	8004ef8 <_svfiprintf_r+0x1c0>
 8004f1c:	0800ea84 	.word	0x0800ea84
 8004f20:	0800ea8e 	.word	0x0800ea8e
 8004f24:	00000000 	.word	0x00000000
 8004f28:	08004c81 	.word	0x08004c81
 8004f2c:	0800ea8a 	.word	0x0800ea8a

08004f30 <__sfputc_r>:
 8004f30:	6893      	ldr	r3, [r2, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	b410      	push	{r4}
 8004f38:	6093      	str	r3, [r2, #8]
 8004f3a:	da08      	bge.n	8004f4e <__sfputc_r+0x1e>
 8004f3c:	6994      	ldr	r4, [r2, #24]
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	db01      	blt.n	8004f46 <__sfputc_r+0x16>
 8004f42:	290a      	cmp	r1, #10
 8004f44:	d103      	bne.n	8004f4e <__sfputc_r+0x1e>
 8004f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f4a:	f000 bbde 	b.w	800570a <__swbuf_r>
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	1c58      	adds	r0, r3, #1
 8004f52:	6010      	str	r0, [r2, #0]
 8004f54:	7019      	strb	r1, [r3, #0]
 8004f56:	4608      	mov	r0, r1
 8004f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <__sfputs_r>:
 8004f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	18d5      	adds	r5, r2, r3
 8004f68:	42ac      	cmp	r4, r5
 8004f6a:	d101      	bne.n	8004f70 <__sfputs_r+0x12>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e007      	b.n	8004f80 <__sfputs_r+0x22>
 8004f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f74:	463a      	mov	r2, r7
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffda 	bl	8004f30 <__sfputc_r>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d1f3      	bne.n	8004f68 <__sfputs_r+0xa>
 8004f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f84 <_vfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	460d      	mov	r5, r1
 8004f8a:	b09d      	sub	sp, #116	@ 0x74
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	4698      	mov	r8, r3
 8004f90:	4606      	mov	r6, r0
 8004f92:	b118      	cbz	r0, 8004f9c <_vfiprintf_r+0x18>
 8004f94:	6a03      	ldr	r3, [r0, #32]
 8004f96:	b90b      	cbnz	r3, 8004f9c <_vfiprintf_r+0x18>
 8004f98:	f7ff fd3c 	bl	8004a14 <__sinit>
 8004f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f9e:	07d9      	lsls	r1, r3, #31
 8004fa0:	d405      	bmi.n	8004fae <_vfiprintf_r+0x2a>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	059a      	lsls	r2, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_vfiprintf_r+0x2a>
 8004fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004faa:	f7ff fe1c 	bl	8004be6 <__retarget_lock_acquire_recursive>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	071b      	lsls	r3, r3, #28
 8004fb2:	d501      	bpl.n	8004fb8 <_vfiprintf_r+0x34>
 8004fb4:	692b      	ldr	r3, [r5, #16]
 8004fb6:	b99b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x5c>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f000 fbe4 	bl	8005788 <__swsetup_r>
 8004fc0:	b170      	cbz	r0, 8004fe0 <_vfiprintf_r+0x5c>
 8004fc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc4:	07dc      	lsls	r4, r3, #31
 8004fc6:	d504      	bpl.n	8004fd2 <_vfiprintf_r+0x4e>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fcc:	b01d      	add	sp, #116	@ 0x74
 8004fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	0598      	lsls	r0, r3, #22
 8004fd6:	d4f7      	bmi.n	8004fc8 <_vfiprintf_r+0x44>
 8004fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fda:	f7ff fe05 	bl	8004be8 <__retarget_lock_release_recursive>
 8004fde:	e7f3      	b.n	8004fc8 <_vfiprintf_r+0x44>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fee:	2330      	movs	r3, #48	@ 0x30
 8004ff0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051a0 <_vfiprintf_r+0x21c>
 8004ff4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ff8:	f04f 0901 	mov.w	r9, #1
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	469a      	mov	sl, r3
 8005000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005004:	b10a      	cbz	r2, 800500a <_vfiprintf_r+0x86>
 8005006:	2a25      	cmp	r2, #37	@ 0x25
 8005008:	d1f9      	bne.n	8004ffe <_vfiprintf_r+0x7a>
 800500a:	ebba 0b04 	subs.w	fp, sl, r4
 800500e:	d00b      	beq.n	8005028 <_vfiprintf_r+0xa4>
 8005010:	465b      	mov	r3, fp
 8005012:	4622      	mov	r2, r4
 8005014:	4629      	mov	r1, r5
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ffa1 	bl	8004f5e <__sfputs_r>
 800501c:	3001      	adds	r0, #1
 800501e:	f000 80a7 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8005022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005024:	445a      	add	r2, fp
 8005026:	9209      	str	r2, [sp, #36]	@ 0x24
 8005028:	f89a 3000 	ldrb.w	r3, [sl]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 809f 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8005032:	2300      	movs	r3, #0
 8005034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800503c:	f10a 0a01 	add.w	sl, sl, #1
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	9307      	str	r3, [sp, #28]
 8005044:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005048:	931a      	str	r3, [sp, #104]	@ 0x68
 800504a:	4654      	mov	r4, sl
 800504c:	2205      	movs	r2, #5
 800504e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005052:	4853      	ldr	r0, [pc, #332]	@ (80051a0 <_vfiprintf_r+0x21c>)
 8005054:	f7fb f8c4 	bl	80001e0 <memchr>
 8005058:	9a04      	ldr	r2, [sp, #16]
 800505a:	b9d8      	cbnz	r0, 8005094 <_vfiprintf_r+0x110>
 800505c:	06d1      	lsls	r1, r2, #27
 800505e:	bf44      	itt	mi
 8005060:	2320      	movmi	r3, #32
 8005062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005066:	0713      	lsls	r3, r2, #28
 8005068:	bf44      	itt	mi
 800506a:	232b      	movmi	r3, #43	@ 0x2b
 800506c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005070:	f89a 3000 	ldrb.w	r3, [sl]
 8005074:	2b2a      	cmp	r3, #42	@ 0x2a
 8005076:	d015      	beq.n	80050a4 <_vfiprintf_r+0x120>
 8005078:	9a07      	ldr	r2, [sp, #28]
 800507a:	4654      	mov	r4, sl
 800507c:	2000      	movs	r0, #0
 800507e:	f04f 0c0a 	mov.w	ip, #10
 8005082:	4621      	mov	r1, r4
 8005084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005088:	3b30      	subs	r3, #48	@ 0x30
 800508a:	2b09      	cmp	r3, #9
 800508c:	d94b      	bls.n	8005126 <_vfiprintf_r+0x1a2>
 800508e:	b1b0      	cbz	r0, 80050be <_vfiprintf_r+0x13a>
 8005090:	9207      	str	r2, [sp, #28]
 8005092:	e014      	b.n	80050be <_vfiprintf_r+0x13a>
 8005094:	eba0 0308 	sub.w	r3, r0, r8
 8005098:	fa09 f303 	lsl.w	r3, r9, r3
 800509c:	4313      	orrs	r3, r2
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	46a2      	mov	sl, r4
 80050a2:	e7d2      	b.n	800504a <_vfiprintf_r+0xc6>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	1d19      	adds	r1, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	9103      	str	r1, [sp, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bfbb      	ittet	lt
 80050b0:	425b      	neglt	r3, r3
 80050b2:	f042 0202 	orrlt.w	r2, r2, #2
 80050b6:	9307      	strge	r3, [sp, #28]
 80050b8:	9307      	strlt	r3, [sp, #28]
 80050ba:	bfb8      	it	lt
 80050bc:	9204      	strlt	r2, [sp, #16]
 80050be:	7823      	ldrb	r3, [r4, #0]
 80050c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80050c2:	d10a      	bne.n	80050da <_vfiprintf_r+0x156>
 80050c4:	7863      	ldrb	r3, [r4, #1]
 80050c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050c8:	d132      	bne.n	8005130 <_vfiprintf_r+0x1ac>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	9203      	str	r2, [sp, #12]
 80050d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050d6:	3402      	adds	r4, #2
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051b0 <_vfiprintf_r+0x22c>
 80050de:	7821      	ldrb	r1, [r4, #0]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4650      	mov	r0, sl
 80050e4:	f7fb f87c 	bl	80001e0 <memchr>
 80050e8:	b138      	cbz	r0, 80050fa <_vfiprintf_r+0x176>
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	eba0 000a 	sub.w	r0, r0, sl
 80050f0:	2240      	movs	r2, #64	@ 0x40
 80050f2:	4082      	lsls	r2, r0
 80050f4:	4313      	orrs	r3, r2
 80050f6:	3401      	adds	r4, #1
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fe:	4829      	ldr	r0, [pc, #164]	@ (80051a4 <_vfiprintf_r+0x220>)
 8005100:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005104:	2206      	movs	r2, #6
 8005106:	f7fb f86b 	bl	80001e0 <memchr>
 800510a:	2800      	cmp	r0, #0
 800510c:	d03f      	beq.n	800518e <_vfiprintf_r+0x20a>
 800510e:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <_vfiprintf_r+0x224>)
 8005110:	bb1b      	cbnz	r3, 800515a <_vfiprintf_r+0x1d6>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	3307      	adds	r3, #7
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	3308      	adds	r3, #8
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	443b      	add	r3, r7
 8005122:	9309      	str	r3, [sp, #36]	@ 0x24
 8005124:	e76a      	b.n	8004ffc <_vfiprintf_r+0x78>
 8005126:	fb0c 3202 	mla	r2, ip, r2, r3
 800512a:	460c      	mov	r4, r1
 800512c:	2001      	movs	r0, #1
 800512e:	e7a8      	b.n	8005082 <_vfiprintf_r+0xfe>
 8005130:	2300      	movs	r3, #0
 8005132:	3401      	adds	r4, #1
 8005134:	9305      	str	r3, [sp, #20]
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0c0a 	mov.w	ip, #10
 800513c:	4620      	mov	r0, r4
 800513e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005142:	3a30      	subs	r2, #48	@ 0x30
 8005144:	2a09      	cmp	r2, #9
 8005146:	d903      	bls.n	8005150 <_vfiprintf_r+0x1cc>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0c6      	beq.n	80050da <_vfiprintf_r+0x156>
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	e7c4      	b.n	80050da <_vfiprintf_r+0x156>
 8005150:	fb0c 2101 	mla	r1, ip, r1, r2
 8005154:	4604      	mov	r4, r0
 8005156:	2301      	movs	r3, #1
 8005158:	e7f0      	b.n	800513c <_vfiprintf_r+0x1b8>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <_vfiprintf_r+0x228>)
 8005162:	a904      	add	r1, sp, #16
 8005164:	4630      	mov	r0, r6
 8005166:	f3af 8000 	nop.w
 800516a:	4607      	mov	r7, r0
 800516c:	1c78      	adds	r0, r7, #1
 800516e:	d1d6      	bne.n	800511e <_vfiprintf_r+0x19a>
 8005170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005172:	07d9      	lsls	r1, r3, #31
 8005174:	d405      	bmi.n	8005182 <_vfiprintf_r+0x1fe>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	059a      	lsls	r2, r3, #22
 800517a:	d402      	bmi.n	8005182 <_vfiprintf_r+0x1fe>
 800517c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517e:	f7ff fd33 	bl	8004be8 <__retarget_lock_release_recursive>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	065b      	lsls	r3, r3, #25
 8005186:	f53f af1f 	bmi.w	8004fc8 <_vfiprintf_r+0x44>
 800518a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800518c:	e71e      	b.n	8004fcc <_vfiprintf_r+0x48>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <_vfiprintf_r+0x228>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4630      	mov	r0, r6
 800519a:	f000 f879 	bl	8005290 <_printf_i>
 800519e:	e7e4      	b.n	800516a <_vfiprintf_r+0x1e6>
 80051a0:	0800ea84 	.word	0x0800ea84
 80051a4:	0800ea8e 	.word	0x0800ea8e
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f5f 	.word	0x08004f5f
 80051b0:	0800ea8a 	.word	0x0800ea8a

080051b4 <_printf_common>:
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4616      	mov	r6, r2
 80051ba:	4698      	mov	r8, r3
 80051bc:	688a      	ldr	r2, [r1, #8]
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfb8      	it	lt
 80051c8:	4613      	movlt	r3, r2
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051d0:	4607      	mov	r7, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	b10a      	cbz	r2, 80051da <_printf_common+0x26>
 80051d6:	3301      	adds	r3, #1
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	0699      	lsls	r1, r3, #26
 80051de:	bf42      	ittt	mi
 80051e0:	6833      	ldrmi	r3, [r6, #0]
 80051e2:	3302      	addmi	r3, #2
 80051e4:	6033      	strmi	r3, [r6, #0]
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	f015 0506 	ands.w	r5, r5, #6
 80051ec:	d106      	bne.n	80051fc <_printf_common+0x48>
 80051ee:	f104 0a19 	add.w	sl, r4, #25
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	6832      	ldr	r2, [r6, #0]
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dc26      	bgt.n	800524a <_printf_common+0x96>
 80051fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	3b00      	subs	r3, #0
 8005204:	bf18      	it	ne
 8005206:	2301      	movne	r3, #1
 8005208:	0692      	lsls	r2, r2, #26
 800520a:	d42b      	bmi.n	8005264 <_printf_common+0xb0>
 800520c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005210:	4641      	mov	r1, r8
 8005212:	4638      	mov	r0, r7
 8005214:	47c8      	blx	r9
 8005216:	3001      	adds	r0, #1
 8005218:	d01e      	beq.n	8005258 <_printf_common+0xa4>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	2b04      	cmp	r3, #4
 8005224:	bf02      	ittt	eq
 8005226:	68e5      	ldreq	r5, [r4, #12]
 8005228:	6833      	ldreq	r3, [r6, #0]
 800522a:	1aed      	subeq	r5, r5, r3
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	bf0c      	ite	eq
 8005230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005234:	2500      	movne	r5, #0
 8005236:	4293      	cmp	r3, r2
 8005238:	bfc4      	itt	gt
 800523a:	1a9b      	subgt	r3, r3, r2
 800523c:	18ed      	addgt	r5, r5, r3
 800523e:	2600      	movs	r6, #0
 8005240:	341a      	adds	r4, #26
 8005242:	42b5      	cmp	r5, r6
 8005244:	d11a      	bne.n	800527c <_printf_common+0xc8>
 8005246:	2000      	movs	r0, #0
 8005248:	e008      	b.n	800525c <_printf_common+0xa8>
 800524a:	2301      	movs	r3, #1
 800524c:	4652      	mov	r2, sl
 800524e:	4641      	mov	r1, r8
 8005250:	4638      	mov	r0, r7
 8005252:	47c8      	blx	r9
 8005254:	3001      	adds	r0, #1
 8005256:	d103      	bne.n	8005260 <_printf_common+0xac>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	3501      	adds	r5, #1
 8005262:	e7c6      	b.n	80051f2 <_printf_common+0x3e>
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	2030      	movs	r0, #48	@ 0x30
 800526a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800526e:	4422      	add	r2, r4
 8005270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005278:	3302      	adds	r3, #2
 800527a:	e7c7      	b.n	800520c <_printf_common+0x58>
 800527c:	2301      	movs	r3, #1
 800527e:	4622      	mov	r2, r4
 8005280:	4641      	mov	r1, r8
 8005282:	4638      	mov	r0, r7
 8005284:	47c8      	blx	r9
 8005286:	3001      	adds	r0, #1
 8005288:	d0e6      	beq.n	8005258 <_printf_common+0xa4>
 800528a:	3601      	adds	r6, #1
 800528c:	e7d9      	b.n	8005242 <_printf_common+0x8e>
	...

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	7e0f      	ldrb	r7, [r1, #24]
 8005296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005298:	2f78      	cmp	r7, #120	@ 0x78
 800529a:	4691      	mov	r9, r2
 800529c:	4680      	mov	r8, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	469a      	mov	sl, r3
 80052a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	@ 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d2 	beq.w	8005456 <_printf_i+0x1c6>
 80052b2:	2f58      	cmp	r7, #88	@ 0x58
 80052b4:	f000 80b9 	beq.w	800542a <_printf_i+0x19a>
 80052b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a101      	add	r1, pc, #4	@ (adr r1, 80052d0 <_printf_i+0x40>)
 80052cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	0800543d 	.word	0x0800543d
 8005300:	08005367 	.word	0x08005367
 8005304:	080053f7 	.word	0x080053f7
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	0800545f 	.word	0x0800545f
 8005314:	080052b9 	.word	0x080052b9
 8005318:	08005367 	.word	0x08005367
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	080053ff 	.word	0x080053ff
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6032      	str	r2, [r6, #0]
 8005330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e09d      	b.n	8005478 <_printf_i+0x1e8>
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	6031      	str	r1, [r6, #0]
 8005344:	0606      	lsls	r6, r0, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xbc>
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	e003      	b.n	8005354 <_printf_i+0xc4>
 800534c:	0645      	lsls	r5, r0, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xb8>
 8005350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005354:	2d00      	cmp	r5, #0
 8005356:	da03      	bge.n	8005360 <_printf_i+0xd0>
 8005358:	232d      	movs	r3, #45	@ 0x2d
 800535a:	426d      	negs	r5, r5
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005360:	4859      	ldr	r0, [pc, #356]	@ (80054c8 <_printf_i+0x238>)
 8005362:	230a      	movs	r3, #10
 8005364:	e011      	b.n	800538a <_printf_i+0xfa>
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	0608      	lsls	r0, r1, #24
 800536c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005370:	d402      	bmi.n	8005378 <_printf_i+0xe8>
 8005372:	0649      	lsls	r1, r1, #25
 8005374:	bf48      	it	mi
 8005376:	b2ad      	uxthmi	r5, r5
 8005378:	2f6f      	cmp	r7, #111	@ 0x6f
 800537a:	4853      	ldr	r0, [pc, #332]	@ (80054c8 <_printf_i+0x238>)
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	bf14      	ite	ne
 8005380:	230a      	movne	r3, #10
 8005382:	2308      	moveq	r3, #8
 8005384:	2100      	movs	r1, #0
 8005386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800538a:	6866      	ldr	r6, [r4, #4]
 800538c:	60a6      	str	r6, [r4, #8]
 800538e:	2e00      	cmp	r6, #0
 8005390:	bfa2      	ittt	ge
 8005392:	6821      	ldrge	r1, [r4, #0]
 8005394:	f021 0104 	bicge.w	r1, r1, #4
 8005398:	6021      	strge	r1, [r4, #0]
 800539a:	b90d      	cbnz	r5, 80053a0 <_printf_i+0x110>
 800539c:	2e00      	cmp	r6, #0
 800539e:	d04b      	beq.n	8005438 <_printf_i+0x1a8>
 80053a0:	4616      	mov	r6, r2
 80053a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80053a6:	fb03 5711 	mls	r7, r3, r1, r5
 80053aa:	5dc7      	ldrb	r7, [r0, r7]
 80053ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b0:	462f      	mov	r7, r5
 80053b2:	42bb      	cmp	r3, r7
 80053b4:	460d      	mov	r5, r1
 80053b6:	d9f4      	bls.n	80053a2 <_printf_i+0x112>
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d10b      	bne.n	80053d4 <_printf_i+0x144>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	07df      	lsls	r7, r3, #31
 80053c0:	d508      	bpl.n	80053d4 <_printf_i+0x144>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	6861      	ldr	r1, [r4, #4]
 80053c6:	4299      	cmp	r1, r3
 80053c8:	bfde      	ittt	le
 80053ca:	2330      	movle	r3, #48	@ 0x30
 80053cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80053d4:	1b92      	subs	r2, r2, r6
 80053d6:	6122      	str	r2, [r4, #16]
 80053d8:	f8cd a000 	str.w	sl, [sp]
 80053dc:	464b      	mov	r3, r9
 80053de:	aa03      	add	r2, sp, #12
 80053e0:	4621      	mov	r1, r4
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fee6 	bl	80051b4 <_printf_common>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d14a      	bne.n	8005482 <_printf_i+0x1f2>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053f0:	b004      	add	sp, #16
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	4833      	ldr	r0, [pc, #204]	@ (80054cc <_printf_i+0x23c>)
 8005400:	2778      	movs	r7, #120	@ 0x78
 8005402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	6831      	ldr	r1, [r6, #0]
 800540a:	061f      	lsls	r7, r3, #24
 800540c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005410:	d402      	bmi.n	8005418 <_printf_i+0x188>
 8005412:	065f      	lsls	r7, r3, #25
 8005414:	bf48      	it	mi
 8005416:	b2ad      	uxthmi	r5, r5
 8005418:	6031      	str	r1, [r6, #0]
 800541a:	07d9      	lsls	r1, r3, #31
 800541c:	bf44      	itt	mi
 800541e:	f043 0320 	orrmi.w	r3, r3, #32
 8005422:	6023      	strmi	r3, [r4, #0]
 8005424:	b11d      	cbz	r5, 800542e <_printf_i+0x19e>
 8005426:	2310      	movs	r3, #16
 8005428:	e7ac      	b.n	8005384 <_printf_i+0xf4>
 800542a:	4827      	ldr	r0, [pc, #156]	@ (80054c8 <_printf_i+0x238>)
 800542c:	e7e9      	b.n	8005402 <_printf_i+0x172>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f023 0320 	bic.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	e7f6      	b.n	8005426 <_printf_i+0x196>
 8005438:	4616      	mov	r6, r2
 800543a:	e7bd      	b.n	80053b8 <_printf_i+0x128>
 800543c:	6833      	ldr	r3, [r6, #0]
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	6961      	ldr	r1, [r4, #20]
 8005442:	1d18      	adds	r0, r3, #4
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	062e      	lsls	r6, r5, #24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	d501      	bpl.n	8005450 <_printf_i+0x1c0>
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0x1c6>
 8005450:	0668      	lsls	r0, r5, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0x1bc>
 8005454:	8019      	strh	r1, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	4616      	mov	r6, r2
 800545c:	e7bc      	b.n	80053d8 <_printf_i+0x148>
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	6032      	str	r2, [r6, #0]
 8005464:	681e      	ldr	r6, [r3, #0]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	2100      	movs	r1, #0
 800546a:	4630      	mov	r0, r6
 800546c:	f7fa feb8 	bl	80001e0 <memchr>
 8005470:	b108      	cbz	r0, 8005476 <_printf_i+0x1e6>
 8005472:	1b80      	subs	r0, r0, r6
 8005474:	6060      	str	r0, [r4, #4]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	2300      	movs	r3, #0
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005480:	e7aa      	b.n	80053d8 <_printf_i+0x148>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	4632      	mov	r2, r6
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d0ad      	beq.n	80053ec <_printf_i+0x15c>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	079b      	lsls	r3, r3, #30
 8005494:	d413      	bmi.n	80054be <_printf_i+0x22e>
 8005496:	68e0      	ldr	r0, [r4, #12]
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	4298      	cmp	r0, r3
 800549c:	bfb8      	it	lt
 800549e:	4618      	movlt	r0, r3
 80054a0:	e7a6      	b.n	80053f0 <_printf_i+0x160>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4632      	mov	r2, r6
 80054a6:	4649      	mov	r1, r9
 80054a8:	4640      	mov	r0, r8
 80054aa:	47d0      	blx	sl
 80054ac:	3001      	adds	r0, #1
 80054ae:	d09d      	beq.n	80053ec <_printf_i+0x15c>
 80054b0:	3501      	adds	r5, #1
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	9903      	ldr	r1, [sp, #12]
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dcf2      	bgt.n	80054a2 <_printf_i+0x212>
 80054bc:	e7eb      	b.n	8005496 <_printf_i+0x206>
 80054be:	2500      	movs	r5, #0
 80054c0:	f104 0619 	add.w	r6, r4, #25
 80054c4:	e7f5      	b.n	80054b2 <_printf_i+0x222>
 80054c6:	bf00      	nop
 80054c8:	0800ea95 	.word	0x0800ea95
 80054cc:	0800eaa6 	.word	0x0800eaa6

080054d0 <__sflush_r>:
 80054d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d8:	0716      	lsls	r6, r2, #28
 80054da:	4605      	mov	r5, r0
 80054dc:	460c      	mov	r4, r1
 80054de:	d454      	bmi.n	800558a <__sflush_r+0xba>
 80054e0:	684b      	ldr	r3, [r1, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	dc02      	bgt.n	80054ec <__sflush_r+0x1c>
 80054e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dd48      	ble.n	800557e <__sflush_r+0xae>
 80054ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d045      	beq.n	800557e <__sflush_r+0xae>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054f8:	682f      	ldr	r7, [r5, #0]
 80054fa:	6a21      	ldr	r1, [r4, #32]
 80054fc:	602b      	str	r3, [r5, #0]
 80054fe:	d030      	beq.n	8005562 <__sflush_r+0x92>
 8005500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	0759      	lsls	r1, r3, #29
 8005506:	d505      	bpl.n	8005514 <__sflush_r+0x44>
 8005508:	6863      	ldr	r3, [r4, #4]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800550e:	b10b      	cbz	r3, 8005514 <__sflush_r+0x44>
 8005510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005518:	6a21      	ldr	r1, [r4, #32]
 800551a:	4628      	mov	r0, r5
 800551c:	47b0      	blx	r6
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	d106      	bne.n	8005532 <__sflush_r+0x62>
 8005524:	6829      	ldr	r1, [r5, #0]
 8005526:	291d      	cmp	r1, #29
 8005528:	d82b      	bhi.n	8005582 <__sflush_r+0xb2>
 800552a:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <__sflush_r+0x104>)
 800552c:	410a      	asrs	r2, r1
 800552e:	07d6      	lsls	r6, r2, #31
 8005530:	d427      	bmi.n	8005582 <__sflush_r+0xb2>
 8005532:	2200      	movs	r2, #0
 8005534:	6062      	str	r2, [r4, #4]
 8005536:	04d9      	lsls	r1, r3, #19
 8005538:	6922      	ldr	r2, [r4, #16]
 800553a:	6022      	str	r2, [r4, #0]
 800553c:	d504      	bpl.n	8005548 <__sflush_r+0x78>
 800553e:	1c42      	adds	r2, r0, #1
 8005540:	d101      	bne.n	8005546 <__sflush_r+0x76>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	b903      	cbnz	r3, 8005548 <__sflush_r+0x78>
 8005546:	6560      	str	r0, [r4, #84]	@ 0x54
 8005548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554a:	602f      	str	r7, [r5, #0]
 800554c:	b1b9      	cbz	r1, 800557e <__sflush_r+0xae>
 800554e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005552:	4299      	cmp	r1, r3
 8005554:	d002      	beq.n	800555c <__sflush_r+0x8c>
 8005556:	4628      	mov	r0, r5
 8005558:	f7ff fb48 	bl	8004bec <_free_r>
 800555c:	2300      	movs	r3, #0
 800555e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005560:	e00d      	b.n	800557e <__sflush_r+0xae>
 8005562:	2301      	movs	r3, #1
 8005564:	4628      	mov	r0, r5
 8005566:	47b0      	blx	r6
 8005568:	4602      	mov	r2, r0
 800556a:	1c50      	adds	r0, r2, #1
 800556c:	d1c9      	bne.n	8005502 <__sflush_r+0x32>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0c6      	beq.n	8005502 <__sflush_r+0x32>
 8005574:	2b1d      	cmp	r3, #29
 8005576:	d001      	beq.n	800557c <__sflush_r+0xac>
 8005578:	2b16      	cmp	r3, #22
 800557a:	d11e      	bne.n	80055ba <__sflush_r+0xea>
 800557c:	602f      	str	r7, [r5, #0]
 800557e:	2000      	movs	r0, #0
 8005580:	e022      	b.n	80055c8 <__sflush_r+0xf8>
 8005582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005586:	b21b      	sxth	r3, r3
 8005588:	e01b      	b.n	80055c2 <__sflush_r+0xf2>
 800558a:	690f      	ldr	r7, [r1, #16]
 800558c:	2f00      	cmp	r7, #0
 800558e:	d0f6      	beq.n	800557e <__sflush_r+0xae>
 8005590:	0793      	lsls	r3, r2, #30
 8005592:	680e      	ldr	r6, [r1, #0]
 8005594:	bf08      	it	eq
 8005596:	694b      	ldreq	r3, [r1, #20]
 8005598:	600f      	str	r7, [r1, #0]
 800559a:	bf18      	it	ne
 800559c:	2300      	movne	r3, #0
 800559e:	eba6 0807 	sub.w	r8, r6, r7
 80055a2:	608b      	str	r3, [r1, #8]
 80055a4:	f1b8 0f00 	cmp.w	r8, #0
 80055a8:	dde9      	ble.n	800557e <__sflush_r+0xae>
 80055aa:	6a21      	ldr	r1, [r4, #32]
 80055ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055ae:	4643      	mov	r3, r8
 80055b0:	463a      	mov	r2, r7
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b0      	blx	r6
 80055b6:	2800      	cmp	r0, #0
 80055b8:	dc08      	bgt.n	80055cc <__sflush_r+0xfc>
 80055ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	4407      	add	r7, r0
 80055ce:	eba8 0800 	sub.w	r8, r8, r0
 80055d2:	e7e7      	b.n	80055a4 <__sflush_r+0xd4>
 80055d4:	dfbffffe 	.word	0xdfbffffe

080055d8 <_fflush_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	4605      	mov	r5, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	b913      	cbnz	r3, 80055e8 <_fflush_r+0x10>
 80055e2:	2500      	movs	r5, #0
 80055e4:	4628      	mov	r0, r5
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	b118      	cbz	r0, 80055f2 <_fflush_r+0x1a>
 80055ea:	6a03      	ldr	r3, [r0, #32]
 80055ec:	b90b      	cbnz	r3, 80055f2 <_fflush_r+0x1a>
 80055ee:	f7ff fa11 	bl	8004a14 <__sinit>
 80055f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f3      	beq.n	80055e2 <_fflush_r+0xa>
 80055fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055fc:	07d0      	lsls	r0, r2, #31
 80055fe:	d404      	bmi.n	800560a <_fflush_r+0x32>
 8005600:	0599      	lsls	r1, r3, #22
 8005602:	d402      	bmi.n	800560a <_fflush_r+0x32>
 8005604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005606:	f7ff faee 	bl	8004be6 <__retarget_lock_acquire_recursive>
 800560a:	4628      	mov	r0, r5
 800560c:	4621      	mov	r1, r4
 800560e:	f7ff ff5f 	bl	80054d0 <__sflush_r>
 8005612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005614:	07da      	lsls	r2, r3, #31
 8005616:	4605      	mov	r5, r0
 8005618:	d4e4      	bmi.n	80055e4 <_fflush_r+0xc>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	059b      	lsls	r3, r3, #22
 800561e:	d4e1      	bmi.n	80055e4 <_fflush_r+0xc>
 8005620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005622:	f7ff fae1 	bl	8004be8 <__retarget_lock_release_recursive>
 8005626:	e7dd      	b.n	80055e4 <_fflush_r+0xc>

08005628 <__sread>:
 8005628:	b510      	push	{r4, lr}
 800562a:	460c      	mov	r4, r1
 800562c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005630:	f000 f9c0 	bl	80059b4 <_read_r>
 8005634:	2800      	cmp	r0, #0
 8005636:	bfab      	itete	ge
 8005638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800563a:	89a3      	ldrhlt	r3, [r4, #12]
 800563c:	181b      	addge	r3, r3, r0
 800563e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005642:	bfac      	ite	ge
 8005644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005646:	81a3      	strhlt	r3, [r4, #12]
 8005648:	bd10      	pop	{r4, pc}

0800564a <__swrite>:
 800564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	461f      	mov	r7, r3
 8005650:	898b      	ldrh	r3, [r1, #12]
 8005652:	05db      	lsls	r3, r3, #23
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	4616      	mov	r6, r2
 800565a:	d505      	bpl.n	8005668 <__swrite+0x1e>
 800565c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005660:	2302      	movs	r3, #2
 8005662:	2200      	movs	r2, #0
 8005664:	f000 f994 	bl	8005990 <_lseek_r>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800566e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	4632      	mov	r2, r6
 8005676:	463b      	mov	r3, r7
 8005678:	4628      	mov	r0, r5
 800567a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800567e:	f000 b9ab 	b.w	80059d8 <_write_r>

08005682 <__sseek>:
 8005682:	b510      	push	{r4, lr}
 8005684:	460c      	mov	r4, r1
 8005686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568a:	f000 f981 	bl	8005990 <_lseek_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	bf15      	itete	ne
 8005694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800569a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800569e:	81a3      	strheq	r3, [r4, #12]
 80056a0:	bf18      	it	ne
 80056a2:	81a3      	strhne	r3, [r4, #12]
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <__sclose>:
 80056a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056aa:	f000 b93f 	b.w	800592c <_close_r>

080056ae <_realloc_r>:
 80056ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b2:	4680      	mov	r8, r0
 80056b4:	4615      	mov	r5, r2
 80056b6:	460c      	mov	r4, r1
 80056b8:	b921      	cbnz	r1, 80056c4 <_realloc_r+0x16>
 80056ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	4611      	mov	r1, r2
 80056c0:	f7ff b870 	b.w	80047a4 <_malloc_r>
 80056c4:	b92a      	cbnz	r2, 80056d2 <_realloc_r+0x24>
 80056c6:	f7ff fa91 	bl	8004bec <_free_r>
 80056ca:	2400      	movs	r4, #0
 80056cc:	4620      	mov	r0, r4
 80056ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d2:	f000 f9a1 	bl	8005a18 <_malloc_usable_size_r>
 80056d6:	4285      	cmp	r5, r0
 80056d8:	4606      	mov	r6, r0
 80056da:	d802      	bhi.n	80056e2 <_realloc_r+0x34>
 80056dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056e0:	d8f4      	bhi.n	80056cc <_realloc_r+0x1e>
 80056e2:	4629      	mov	r1, r5
 80056e4:	4640      	mov	r0, r8
 80056e6:	f7ff f85d 	bl	80047a4 <_malloc_r>
 80056ea:	4607      	mov	r7, r0
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0ec      	beq.n	80056ca <_realloc_r+0x1c>
 80056f0:	42b5      	cmp	r5, r6
 80056f2:	462a      	mov	r2, r5
 80056f4:	4621      	mov	r1, r4
 80056f6:	bf28      	it	cs
 80056f8:	4632      	movcs	r2, r6
 80056fa:	f000 f97f 	bl	80059fc <memcpy>
 80056fe:	4621      	mov	r1, r4
 8005700:	4640      	mov	r0, r8
 8005702:	f7ff fa73 	bl	8004bec <_free_r>
 8005706:	463c      	mov	r4, r7
 8005708:	e7e0      	b.n	80056cc <_realloc_r+0x1e>

0800570a <__swbuf_r>:
 800570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570c:	460e      	mov	r6, r1
 800570e:	4614      	mov	r4, r2
 8005710:	4605      	mov	r5, r0
 8005712:	b118      	cbz	r0, 800571c <__swbuf_r+0x12>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swbuf_r+0x12>
 8005718:	f7ff f97c 	bl	8004a14 <__sinit>
 800571c:	69a3      	ldr	r3, [r4, #24]
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	071a      	lsls	r2, r3, #28
 8005724:	d501      	bpl.n	800572a <__swbuf_r+0x20>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	b943      	cbnz	r3, 800573c <__swbuf_r+0x32>
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f82b 	bl	8005788 <__swsetup_r>
 8005732:	b118      	cbz	r0, 800573c <__swbuf_r+0x32>
 8005734:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005738:	4638      	mov	r0, r7
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	1a98      	subs	r0, r3, r2
 8005742:	6963      	ldr	r3, [r4, #20]
 8005744:	b2f6      	uxtb	r6, r6
 8005746:	4283      	cmp	r3, r0
 8005748:	4637      	mov	r7, r6
 800574a:	dc05      	bgt.n	8005758 <__swbuf_r+0x4e>
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff ff42 	bl	80055d8 <_fflush_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	d1ed      	bne.n	8005734 <__swbuf_r+0x2a>
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	3b01      	subs	r3, #1
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	6022      	str	r2, [r4, #0]
 8005764:	701e      	strb	r6, [r3, #0]
 8005766:	6962      	ldr	r2, [r4, #20]
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	429a      	cmp	r2, r3
 800576c:	d004      	beq.n	8005778 <__swbuf_r+0x6e>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	07db      	lsls	r3, r3, #31
 8005772:	d5e1      	bpl.n	8005738 <__swbuf_r+0x2e>
 8005774:	2e0a      	cmp	r6, #10
 8005776:	d1df      	bne.n	8005738 <__swbuf_r+0x2e>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f7ff ff2c 	bl	80055d8 <_fflush_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0d9      	beq.n	8005738 <__swbuf_r+0x2e>
 8005784:	e7d6      	b.n	8005734 <__swbuf_r+0x2a>
	...

08005788 <__swsetup_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <__swsetup_r+0xa8>)
 800578c:	4605      	mov	r5, r0
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	460c      	mov	r4, r1
 8005792:	b118      	cbz	r0, 800579c <__swsetup_r+0x14>
 8005794:	6a03      	ldr	r3, [r0, #32]
 8005796:	b90b      	cbnz	r3, 800579c <__swsetup_r+0x14>
 8005798:	f7ff f93c 	bl	8004a14 <__sinit>
 800579c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	d422      	bmi.n	80057ea <__swsetup_r+0x62>
 80057a4:	06da      	lsls	r2, r3, #27
 80057a6:	d407      	bmi.n	80057b8 <__swsetup_r+0x30>
 80057a8:	2209      	movs	r2, #9
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057b6:	e033      	b.n	8005820 <__swsetup_r+0x98>
 80057b8:	0758      	lsls	r0, r3, #29
 80057ba:	d512      	bpl.n	80057e2 <__swsetup_r+0x5a>
 80057bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057be:	b141      	cbz	r1, 80057d2 <__swsetup_r+0x4a>
 80057c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c4:	4299      	cmp	r1, r3
 80057c6:	d002      	beq.n	80057ce <__swsetup_r+0x46>
 80057c8:	4628      	mov	r0, r5
 80057ca:	f7ff fa0f 	bl	8004bec <_free_r>
 80057ce:	2300      	movs	r3, #0
 80057d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	2300      	movs	r3, #0
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0308 	orr.w	r3, r3, #8
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	b94b      	cbnz	r3, 8005802 <__swsetup_r+0x7a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f8:	d003      	beq.n	8005802 <__swsetup_r+0x7a>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f83f 	bl	8005880 <__smakebuf_r>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	f013 0201 	ands.w	r2, r3, #1
 800580a:	d00a      	beq.n	8005822 <__swsetup_r+0x9a>
 800580c:	2200      	movs	r2, #0
 800580e:	60a2      	str	r2, [r4, #8]
 8005810:	6962      	ldr	r2, [r4, #20]
 8005812:	4252      	negs	r2, r2
 8005814:	61a2      	str	r2, [r4, #24]
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	b942      	cbnz	r2, 800582c <__swsetup_r+0xa4>
 800581a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800581e:	d1c5      	bne.n	80057ac <__swsetup_r+0x24>
 8005820:	bd38      	pop	{r3, r4, r5, pc}
 8005822:	0799      	lsls	r1, r3, #30
 8005824:	bf58      	it	pl
 8005826:	6962      	ldrpl	r2, [r4, #20]
 8005828:	60a2      	str	r2, [r4, #8]
 800582a:	e7f4      	b.n	8005816 <__swsetup_r+0x8e>
 800582c:	2000      	movs	r0, #0
 800582e:	e7f7      	b.n	8005820 <__swsetup_r+0x98>
 8005830:	20000240 	.word	0x20000240

08005834 <__swhatbuf_r>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	460c      	mov	r4, r1
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	2900      	cmp	r1, #0
 800583e:	b096      	sub	sp, #88	@ 0x58
 8005840:	4615      	mov	r5, r2
 8005842:	461e      	mov	r6, r3
 8005844:	da0d      	bge.n	8005862 <__swhatbuf_r+0x2e>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	bf14      	ite	ne
 8005852:	2340      	movne	r3, #64	@ 0x40
 8005854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005858:	2000      	movs	r0, #0
 800585a:	6031      	str	r1, [r6, #0]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	b016      	add	sp, #88	@ 0x58
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	466a      	mov	r2, sp
 8005864:	f000 f872 	bl	800594c <_fstat_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	dbec      	blt.n	8005846 <__swhatbuf_r+0x12>
 800586c:	9901      	ldr	r1, [sp, #4]
 800586e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005876:	4259      	negs	r1, r3
 8005878:	4159      	adcs	r1, r3
 800587a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800587e:	e7eb      	b.n	8005858 <__swhatbuf_r+0x24>

08005880 <__smakebuf_r>:
 8005880:	898b      	ldrh	r3, [r1, #12]
 8005882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005884:	079d      	lsls	r5, r3, #30
 8005886:	4606      	mov	r6, r0
 8005888:	460c      	mov	r4, r1
 800588a:	d507      	bpl.n	800589c <__smakebuf_r+0x1c>
 800588c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	6123      	str	r3, [r4, #16]
 8005894:	2301      	movs	r3, #1
 8005896:	6163      	str	r3, [r4, #20]
 8005898:	b003      	add	sp, #12
 800589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589c:	ab01      	add	r3, sp, #4
 800589e:	466a      	mov	r2, sp
 80058a0:	f7ff ffc8 	bl	8005834 <__swhatbuf_r>
 80058a4:	9f00      	ldr	r7, [sp, #0]
 80058a6:	4605      	mov	r5, r0
 80058a8:	4639      	mov	r1, r7
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7fe ff7a 	bl	80047a4 <_malloc_r>
 80058b0:	b948      	cbnz	r0, 80058c6 <__smakebuf_r+0x46>
 80058b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b6:	059a      	lsls	r2, r3, #22
 80058b8:	d4ee      	bmi.n	8005898 <__smakebuf_r+0x18>
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	e7e2      	b.n	800588c <__smakebuf_r+0xc>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	6020      	str	r0, [r4, #0]
 80058ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058d6:	b15b      	cbz	r3, 80058f0 <__smakebuf_r+0x70>
 80058d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 f847 	bl	8005970 <_isatty_r>
 80058e2:	b128      	cbz	r0, 80058f0 <__smakebuf_r+0x70>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	431d      	orrs	r5, r3
 80058f4:	81a5      	strh	r5, [r4, #12]
 80058f6:	e7cf      	b.n	8005898 <__smakebuf_r+0x18>

080058f8 <memmove>:
 80058f8:	4288      	cmp	r0, r1
 80058fa:	b510      	push	{r4, lr}
 80058fc:	eb01 0402 	add.w	r4, r1, r2
 8005900:	d902      	bls.n	8005908 <memmove+0x10>
 8005902:	4284      	cmp	r4, r0
 8005904:	4623      	mov	r3, r4
 8005906:	d807      	bhi.n	8005918 <memmove+0x20>
 8005908:	1e43      	subs	r3, r0, #1
 800590a:	42a1      	cmp	r1, r4
 800590c:	d008      	beq.n	8005920 <memmove+0x28>
 800590e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005916:	e7f8      	b.n	800590a <memmove+0x12>
 8005918:	4402      	add	r2, r0
 800591a:	4601      	mov	r1, r0
 800591c:	428a      	cmp	r2, r1
 800591e:	d100      	bne.n	8005922 <memmove+0x2a>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800592a:	e7f7      	b.n	800591c <memmove+0x24>

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	@ (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fc f8c1 	bl	8001abe <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000534 	.word	0x20000534

0800594c <_fstat_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_fstat_r+0x20>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	f7fc f8bc 	bl	8001ad6 <_fstat>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d102      	bne.n	8005968 <_fstat_r+0x1c>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	b103      	cbz	r3, 8005968 <_fstat_r+0x1c>
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	20000534 	.word	0x20000534

08005970 <_isatty_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	@ (800598c <_isatty_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fc f8bb 	bl	8001af6 <_isatty>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_isatty_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_isatty_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000534 	.word	0x20000534

08005990 <_lseek_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	@ (80059b0 <_lseek_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fc f8b4 	bl	8001b0c <_lseek>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_lseek_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_lseek_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000534 	.word	0x20000534

080059b4 <_read_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	@ (80059d4 <_read_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fc f842 	bl	8001a4c <_read>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_read_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_read_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000534 	.word	0x20000534

080059d8 <_write_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	@ (80059f8 <_write_r+0x20>)
 80059dc:	4604      	mov	r4, r0
 80059de:	4608      	mov	r0, r1
 80059e0:	4611      	mov	r1, r2
 80059e2:	2200      	movs	r2, #0
 80059e4:	602a      	str	r2, [r5, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f7fc f84d 	bl	8001a86 <_write>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_write_r+0x1e>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_write_r+0x1e>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000534 	.word	0x20000534

080059fc <memcpy>:
 80059fc:	440a      	add	r2, r1
 80059fe:	4291      	cmp	r1, r2
 8005a00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a04:	d100      	bne.n	8005a08 <memcpy+0xc>
 8005a06:	4770      	bx	lr
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a12:	4291      	cmp	r1, r2
 8005a14:	d1f9      	bne.n	8005a0a <memcpy+0xe>
 8005a16:	bd10      	pop	{r4, pc}

08005a18 <_malloc_usable_size_r>:
 8005a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1c:	1f18      	subs	r0, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bfbc      	itt	lt
 8005a22:	580b      	ldrlt	r3, [r1, r0]
 8005a24:	18c0      	addlt	r0, r0, r3
 8005a26:	4770      	bx	lr

08005a28 <_init>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr

08005a34 <_fini>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr
